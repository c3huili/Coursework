
Project5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001500  00001594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000b4  008000b4  000015e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a8  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ba  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b3  00000000  00000000  00002fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000334  00000000  00000000  0000369c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000824  00000000  00000000  00003d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  0000457f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3d       	cpi	r26, 0xD2	; 210
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 06 	call	0xc62	; 0xc62 <main>
      8a:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	23 bf       	out	0x33, r18	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
      96:	33 ef       	ldi	r19, 0xF3	; 243

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
      98:	08 c0       	rjmp	.+16     	; 0xaa <wait_avr+0x18>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
      9a:	32 bf       	out	0x32, r19	; 50
    SET_BIT(TIFR, TOV0);
      9c:	28 b7       	in	r18, 0x38	; 56
      9e:	21 60       	ori	r18, 0x01	; 1
      a0:	28 bf       	out	0x38, r18	; 56
    WDR();
      a2:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
      a4:	08 b6       	in	r0, 0x38	; 56
      a6:	00 fe       	sbrs	r0, 0
      a8:	fd cf       	rjmp	.-6      	; 0xa4 <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
      aa:	01 97       	sbiw	r24, 0x01	; 1
      ac:	b0 f7       	brcc	.-20     	; 0x9a <wait_avr+0x8>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
      ae:	13 be       	out	0x33, r1	; 51
      b0:	08 95       	ret

000000b2 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
      b2:	66 23       	and	r22, r22
      b4:	11 f0       	breq	.+4      	; 0xba <output+0x8>
      b6:	c0 9a       	sbi	0x18, 0	; 24
      b8:	01 c0       	rjmp	.+2      	; 0xbc <output+0xa>
      ba:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
      bc:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
      be:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
      c0:	8f ef       	ldi	r24, 0xFF	; 255
      c2:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
      c4:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
      c6:	00 00       	nop
  NOP();
      c8:	00 00       	nop
  NOP();
      ca:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
      cc:	c2 98       	cbi	0x18, 2	; 24
      ce:	08 95       	ret

000000d0 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
      d0:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
      d2:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
      d4:	11 ba       	out	0x11, r1	; 17
  return PIND;
      d6:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
      d8:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
      da:	00 00       	nop
  NOP();
      dc:	00 00       	nop
  NOP();
      de:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
      e0:	11 ba       	out	0x11, r1	; 17
  return PIND;
      e2:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
      e4:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
      e6:	99 23       	and	r25, r25
      e8:	9c f3       	brlt	.-26     	; 0xd0 <write>
  output(c, rs);
      ea:	0e 94 59 00 	call	0xb2	; 0xb2 <output>
      ee:	08 95       	ret

000000f0 <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
      f0:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
      f2:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
      f4:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
      f6:	80 e1       	ldi	r24, 0x10	; 16
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
  output(0x30, 0);
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	80 e3       	ldi	r24, 0x30	; 48
     102:	0e 94 59 00 	call	0xb2	; 0xb2 <output>
  wait_avr(5);
     106:	85 e0       	ldi	r24, 0x05	; 5
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
  output(0x30, 0);
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	80 e3       	ldi	r24, 0x30	; 48
     112:	0e 94 59 00 	call	0xb2	; 0xb2 <output>
  wait_avr(1);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
  write(0x3c, 0);
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	8c e3       	ldi	r24, 0x3C	; 60
     122:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
  write(0x0c, 0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	8c e0       	ldi	r24, 0x0C	; 12
     12a:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
  write(0x06, 0);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	86 e0       	ldi	r24, 0x06	; 6
     132:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
  write(0x01, 0);
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
     13e:	08 95       	ret

00000140 <clr_lcd>:
}

void
clr_lcd(void)
{
  write(0x01, 0);
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
     148:	08 95       	ret

0000014a <pos_lcd>:
}

void
pos_lcd(unsigned char r, unsigned char c)
{
     14a:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
     14c:	c6 2f       	mov	r28, r22
     14e:	98 e2       	ldi	r25, 0x28	; 40
     150:	89 9f       	mul	r24, r25
     152:	c0 0d       	add	r28, r0
     154:	11 24       	eor	r1, r1
  write(0x02, 0);
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
  while (n--) {
     15e:	cc 23       	and	r28, r28
     160:	31 f0       	breq	.+12     	; 0x16e <pos_lcd+0x24>
    write(0x14, 0);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	84 e1       	ldi	r24, 0x14	; 20
     166:	0e 94 68 00 	call	0xd0	; 0xd0 <write>
     16a:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
     16c:	d1 f7       	brne	.-12     	; 0x162 <pos_lcd+0x18>
    write(0x14, 0);
  }
}
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <puts_lcd2>:
  }
}

void
puts_lcd2(const char *s)
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
     176:	ec 01       	movw	r28, r24
     178:	21 96       	adiw	r28, 0x01	; 1
     17a:	fc 01       	movw	r30, r24
     17c:	80 81       	ld	r24, Z
     17e:	88 23       	and	r24, r24
     180:	31 f0       	breq	.+12     	; 0x18e <puts_lcd2+0x1c>
    write(c, 1);
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	0e 94 68 00 	call	0xd0	; 0xd0 <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
     188:	89 91       	ld	r24, Y+
     18a:	81 11       	cpse	r24, r1
     18c:	fa cf       	rjmp	.-12     	; 0x182 <puts_lcd2+0x10>
    write(c, 1);
  }
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <init_adc>:
}


void init_adc()
{
	ADMUX = (1 << REFS0);
     194:	80 e4       	ldi	r24, 0x40	; 64
     196:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     198:	87 e8       	ldi	r24, 0x87	; 135
     19a:	86 b9       	out	0x06, r24	; 6
     19c:	08 95       	ret

0000019e <get_sample>:

unsigned short get_sample()
{
	uint8_t c = 0;
	c &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|c;
     19e:	87 b1       	in	r24, 0x07	; 7
     1a0:	88 7f       	andi	r24, 0xF8	; 248
     1a2:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC);
     1a4:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
     1a6:	36 99       	sbic	0x06, 6	; 6
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <get_sample+0x8>
	return ADC;
     1aa:	84 b1       	in	r24, 0x04	; 4
     1ac:	95 b1       	in	r25, 0x05	; 5
}
     1ae:	08 95       	ret

000001b0 <init_keypad>:

void init_keypad()
{
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	for(int row = 0; row < 4; ++row)
     1bc:	00 e0       	ldi	r16, 0x00	; 0
     1be:	10 e0       	ldi	r17, 0x00	; 0
	{
		wait_avr(1);
		SET_BIT(DDRC,row);
		CLR_BIT(PORTC, row);	//strong 0
		wait_avr(1);
		for(int col = 4; col < 8; ++col)
     1c0:	68 94       	set
     1c2:	ee 24       	eor	r14, r14
     1c4:	e2 f8       	bld	r14, 2
     1c6:	f1 2c       	mov	r15, r1

void init_keypad()
{
	for(int row = 0; row < 4; ++row)
	{
		wait_avr(1);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		SET_BIT(DDRC,row);
     1d0:	24 b3       	in	r18, 0x14	; 20
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	00 2e       	mov	r0, r16
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <init_keypad+0x2e>
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	0a 94       	dec	r0
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <init_keypad+0x2a>
     1e2:	92 2f       	mov	r25, r18
     1e4:	98 2b       	or	r25, r24
     1e6:	94 bb       	out	0x14, r25	; 20
		CLR_BIT(PORTC, row);	//strong 0
     1e8:	95 b3       	in	r25, 0x15	; 21
     1ea:	80 95       	com	r24
     1ec:	89 23       	and	r24, r25
     1ee:	85 bb       	out	0x15, r24	; 21
		wait_avr(1);
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		for(int col = 4; col < 8; ++col)
     1f8:	ce 2d       	mov	r28, r14
     1fa:	df 2d       	mov	r29, r15
		{
			wait_avr(1);
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
			CLR_BIT(DDRC, col);
     204:	24 b3       	in	r18, 0x14	; 20
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0c 2e       	mov	r0, r28
     20c:	02 c0       	rjmp	.+4      	; 0x212 <init_keypad+0x62>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	0a 94       	dec	r0
     214:	e2 f7       	brpl	.-8      	; 0x20e <init_keypad+0x5e>
     216:	98 2f       	mov	r25, r24
     218:	90 95       	com	r25
     21a:	92 23       	and	r25, r18
     21c:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,col);	// weak 1
     21e:	95 b3       	in	r25, 0x15	; 21
     220:	89 2b       	or	r24, r25
     222:	85 bb       	out	0x15, r24	; 21
			wait_avr(1);
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
	{
		wait_avr(1);
		SET_BIT(DDRC,row);
		CLR_BIT(PORTC, row);	//strong 0
		wait_avr(1);
		for(int col = 4; col < 8; ++col)
     22c:	21 96       	adiw	r28, 0x01	; 1
     22e:	c8 30       	cpi	r28, 0x08	; 8
     230:	d1 05       	cpc	r29, r1
     232:	21 f7       	brne	.-56     	; 0x1fc <init_keypad+0x4c>
	return ADC;
}

void init_keypad()
{
	for(int row = 0; row < 4; ++row)
     234:	0f 5f       	subi	r16, 0xFF	; 255
     236:	1f 4f       	sbci	r17, 0xFF	; 255
     238:	04 30       	cpi	r16, 0x04	; 4
     23a:	11 05       	cpc	r17, r1
     23c:	29 f6       	brne	.-118    	; 0x1c8 <init_keypad+0x18>
			CLR_BIT(DDRC, col);
			SET_BIT(PORTC,col);	// weak 1
			wait_avr(1);
		}
	}
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	08 95       	ret

0000024c <update_edit>:

void update_edit()
{
	edit_mode = (edit_mode) ? false: true;
     24c:	90 91 d0 00 	lds	r25, 0x00D0
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	89 27       	eor	r24, r25
     254:	80 93 d0 00 	sts	0x00D0, r24
     258:	08 95       	ret

0000025a <edit_hr_M>:
	wait_avr(1000);
}

void edit_hr_M()
{
	if(start)
     25a:	80 91 cf 00 	lds	r24, 0x00CF
     25e:	88 23       	and	r24, r24
     260:	81 f0       	breq	.+32     	; 0x282 <edit_hr_M+0x28>
	{
		start_hr = (start_hr > 0) ? start_hr - 1 : 23;
     262:	80 91 c7 00 	lds	r24, 0x00C7
     266:	90 91 c8 00 	lds	r25, 0x00C8
     26a:	18 16       	cp	r1, r24
     26c:	19 06       	cpc	r1, r25
     26e:	14 f4       	brge	.+4      	; 0x274 <edit_hr_M+0x1a>
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	02 c0       	rjmp	.+4      	; 0x278 <edit_hr_M+0x1e>
     274:	87 e1       	ldi	r24, 0x17	; 23
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	90 93 c8 00 	sts	0x00C8, r25
     27c:	80 93 c7 00 	sts	0x00C7, r24
     280:	08 95       	ret
	}
	else if(finish)
     282:	80 91 bc 00 	lds	r24, 0x00BC
     286:	88 23       	and	r24, r24
     288:	79 f0       	breq	.+30     	; 0x2a8 <edit_hr_M+0x4e>
	{
		end_hr = (end_hr > 0) ? end_hr - 1 : 23;
     28a:	80 91 b7 00 	lds	r24, 0x00B7
     28e:	90 91 b8 00 	lds	r25, 0x00B8
     292:	18 16       	cp	r1, r24
     294:	19 06       	cpc	r1, r25
     296:	14 f4       	brge	.+4      	; 0x29c <edit_hr_M+0x42>
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <edit_hr_M+0x46>
     29c:	87 e1       	ldi	r24, 0x17	; 23
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	90 93 b8 00 	sts	0x00B8, r25
     2a4:	80 93 b7 00 	sts	0x00B7, r24
     2a8:	08 95       	ret

000002aa <edit_hr_P>:
	}
}

void edit_hr_P()
{
	if(start)
     2aa:	80 91 cf 00 	lds	r24, 0x00CF
     2ae:	88 23       	and	r24, r24
     2b0:	81 f0       	breq	.+32     	; 0x2d2 <edit_hr_P+0x28>
	{
		start_hr = (start_hr < 23) ? start_hr + 1 : 0;
     2b2:	80 91 c7 00 	lds	r24, 0x00C7
     2b6:	90 91 c8 00 	lds	r25, 0x00C8
     2ba:	87 31       	cpi	r24, 0x17	; 23
     2bc:	91 05       	cpc	r25, r1
     2be:	14 f4       	brge	.+4      	; 0x2c4 <edit_hr_P+0x1a>
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <edit_hr_P+0x1e>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	90 93 c8 00 	sts	0x00C8, r25
     2cc:	80 93 c7 00 	sts	0x00C7, r24
     2d0:	08 95       	ret
	}
	else if(finish)
     2d2:	80 91 bc 00 	lds	r24, 0x00BC
     2d6:	88 23       	and	r24, r24
     2d8:	79 f0       	breq	.+30     	; 0x2f8 <edit_hr_P+0x4e>
	{
		end_hr = (end_hr < 23) ? end_hr + 1 : 0;
     2da:	80 91 b7 00 	lds	r24, 0x00B7
     2de:	90 91 b8 00 	lds	r25, 0x00B8
     2e2:	87 31       	cpi	r24, 0x17	; 23
     2e4:	91 05       	cpc	r25, r1
     2e6:	14 f4       	brge	.+4      	; 0x2ec <edit_hr_P+0x42>
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <edit_hr_P+0x46>
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 b8 00 	sts	0x00B8, r25
     2f4:	80 93 b7 00 	sts	0x00B7, r24
     2f8:	08 95       	ret

000002fa <edit_min_M>:
	}
}

void edit_min_M()
{
	if(start)
     2fa:	80 91 cf 00 	lds	r24, 0x00CF
     2fe:	88 23       	and	r24, r24
     300:	79 f0       	breq	.+30     	; 0x320 <edit_min_M+0x26>
	{
		start_min = (start_min > 0) ? start_min - 1 : 59;
     302:	80 91 bf 00 	lds	r24, 0x00BF
     306:	90 91 c0 00 	lds	r25, 0x00C0
     30a:	18 16       	cp	r1, r24
     30c:	19 06       	cpc	r1, r25
     30e:	14 f4       	brge	.+4      	; 0x314 <edit_min_M+0x1a>
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	02 c0       	rjmp	.+4      	; 0x318 <edit_min_M+0x1e>
     314:	8b e3       	ldi	r24, 0x3B	; 59
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	90 93 c0 00 	sts	0x00C0, r25
     31c:	80 93 bf 00 	sts	0x00BF, r24
	}
	if(finish)
     320:	80 91 bc 00 	lds	r24, 0x00BC
     324:	88 23       	and	r24, r24
     326:	79 f0       	breq	.+30     	; 0x346 <edit_min_M+0x4c>
	{
		end_min = (end_min > 0) ? end_min - 1 : 59;
     328:	80 91 b9 00 	lds	r24, 0x00B9
     32c:	90 91 ba 00 	lds	r25, 0x00BA
     330:	18 16       	cp	r1, r24
     332:	19 06       	cpc	r1, r25
     334:	14 f4       	brge	.+4      	; 0x33a <edit_min_M+0x40>
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	02 c0       	rjmp	.+4      	; 0x33e <edit_min_M+0x44>
     33a:	8b e3       	ldi	r24, 0x3B	; 59
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	90 93 ba 00 	sts	0x00BA, r25
     342:	80 93 b9 00 	sts	0x00B9, r24
     346:	08 95       	ret

00000348 <edit_min_P>:
	}
}

void edit_min_P()
{
	if(start)
     348:	80 91 cf 00 	lds	r24, 0x00CF
     34c:	88 23       	and	r24, r24
     34e:	81 f0       	breq	.+32     	; 0x370 <edit_min_P+0x28>
	{
		start_min = (start_min < 59) ? start_min + 1 : 0;
     350:	80 91 bf 00 	lds	r24, 0x00BF
     354:	90 91 c0 00 	lds	r25, 0x00C0
     358:	8b 33       	cpi	r24, 0x3B	; 59
     35a:	91 05       	cpc	r25, r1
     35c:	14 f4       	brge	.+4      	; 0x362 <edit_min_P+0x1a>
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	02 c0       	rjmp	.+4      	; 0x366 <edit_min_P+0x1e>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	90 93 c0 00 	sts	0x00C0, r25
     36a:	80 93 bf 00 	sts	0x00BF, r24
     36e:	08 95       	ret
	}
	else if(finish)
     370:	80 91 bc 00 	lds	r24, 0x00BC
     374:	88 23       	and	r24, r24
     376:	79 f0       	breq	.+30     	; 0x396 <edit_min_P+0x4e>
	{
		end_min = (end_min < 59) ? end_min + 1 : 0;
     378:	80 91 b9 00 	lds	r24, 0x00B9
     37c:	90 91 ba 00 	lds	r25, 0x00BA
     380:	8b 33       	cpi	r24, 0x3B	; 59
     382:	91 05       	cpc	r25, r1
     384:	14 f4       	brge	.+4      	; 0x38a <edit_min_P+0x42>
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	02 c0       	rjmp	.+4      	; 0x38e <edit_min_P+0x46>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	90 93 ba 00 	sts	0x00BA, r25
     392:	80 93 b9 00 	sts	0x00B9, r24
     396:	08 95       	ret

00000398 <edit_sec_M>:
	}
}

void edit_sec_M()
{
	if(start)
     398:	80 91 cf 00 	lds	r24, 0x00CF
     39c:	88 23       	and	r24, r24
     39e:	81 f0       	breq	.+32     	; 0x3c0 <edit_sec_M+0x28>
	{
		start_sec = (start_sec > 0) ? start_sec - 1 : 59;
     3a0:	80 91 bd 00 	lds	r24, 0x00BD
     3a4:	90 91 be 00 	lds	r25, 0x00BE
     3a8:	18 16       	cp	r1, r24
     3aa:	19 06       	cpc	r1, r25
     3ac:	14 f4       	brge	.+4      	; 0x3b2 <edit_sec_M+0x1a>
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <edit_sec_M+0x1e>
     3b2:	8b e3       	ldi	r24, 0x3B	; 59
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	90 93 be 00 	sts	0x00BE, r25
     3ba:	80 93 bd 00 	sts	0x00BD, r24
     3be:	08 95       	ret
	}
	else if(finish)
     3c0:	80 91 bc 00 	lds	r24, 0x00BC
     3c4:	88 23       	and	r24, r24
     3c6:	79 f0       	breq	.+30     	; 0x3e6 <edit_sec_M+0x4e>
	{
		end_sec = (end_sec > 0) ? end_sec - 1 : 59;
     3c8:	80 91 c1 00 	lds	r24, 0x00C1
     3cc:	90 91 c2 00 	lds	r25, 0x00C2
     3d0:	18 16       	cp	r1, r24
     3d2:	19 06       	cpc	r1, r25
     3d4:	14 f4       	brge	.+4      	; 0x3da <edit_sec_M+0x42>
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <edit_sec_M+0x46>
     3da:	8b e3       	ldi	r24, 0x3B	; 59
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	90 93 c2 00 	sts	0x00C2, r25
     3e2:	80 93 c1 00 	sts	0x00C1, r24
     3e6:	08 95       	ret

000003e8 <edit_sec_P>:
	}
}

void edit_sec_P()
{
	if(start)
     3e8:	80 91 cf 00 	lds	r24, 0x00CF
     3ec:	88 23       	and	r24, r24
     3ee:	81 f0       	breq	.+32     	; 0x410 <edit_sec_P+0x28>
	{
		start_sec = (start_sec < 59) ? start_sec + 1 : 0;
     3f0:	80 91 bd 00 	lds	r24, 0x00BD
     3f4:	90 91 be 00 	lds	r25, 0x00BE
     3f8:	8b 33       	cpi	r24, 0x3B	; 59
     3fa:	91 05       	cpc	r25, r1
     3fc:	14 f4       	brge	.+4      	; 0x402 <edit_sec_P+0x1a>
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	02 c0       	rjmp	.+4      	; 0x406 <edit_sec_P+0x1e>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 be 00 	sts	0x00BE, r25
     40a:	80 93 bd 00 	sts	0x00BD, r24
     40e:	08 95       	ret
	}
	else if(finish)
     410:	80 91 bc 00 	lds	r24, 0x00BC
     414:	88 23       	and	r24, r24
     416:	79 f0       	breq	.+30     	; 0x436 <edit_sec_P+0x4e>
	{
		end_sec = (end_sec < 59) ? end_sec + 1 : 0;
     418:	80 91 c1 00 	lds	r24, 0x00C1
     41c:	90 91 c2 00 	lds	r25, 0x00C2
     420:	8b 33       	cpi	r24, 0x3B	; 59
     422:	91 05       	cpc	r25, r1
     424:	14 f4       	brge	.+4      	; 0x42a <edit_sec_P+0x42>
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	02 c0       	rjmp	.+4      	; 0x42e <edit_sec_P+0x46>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 c2 00 	sts	0x00C2, r25
     432:	80 93 c1 00 	sts	0x00C1, r24
     436:	08 95       	ret

00000438 <updateTime1>:
		buttonListen();
	}
}

void updateTime1(unsigned short hr, unsigned min, unsigned short sec)
{
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	61 97       	sbiw	r28, 0x11	; 17
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	18 2f       	mov	r17, r24
     45a:	09 2f       	mov	r16, r25
     45c:	f6 2e       	mov	r15, r22
     45e:	e7 2e       	mov	r14, r23
     460:	d4 2e       	mov	r13, r20
     462:	c5 2e       	mov	r12, r21
	char buf[17];
	pos_lcd(1,0);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
	sprintf(buf, "%02d:%02d:%02d", hr, min, sec);
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	80 e6       	ldi	r24, 0x60	; 96
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	8e 01       	movw	r16, r28
     482:	0f 5f       	subi	r16, 0xFF	; 255
     484:	1f 4f       	sbci	r17, 0xFF	; 255
     486:	1f 93       	push	r17
     488:	0f 93       	push	r16
     48a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <sprintf>
	puts_lcd2(buf);
     48e:	c8 01       	movw	r24, r16
     490:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
}
     49e:	61 96       	adiw	r28, 0x11	; 17
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	08 95       	ret

000004bc <edit_finish>:
	}
	
}

void edit_finish()
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
	wait_avr(1000);
     4c0:	88 ee       	ldi	r24, 0xE8	; 232
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
	while(edit_mode && finish)
     4c8:	80 91 d0 00 	lds	r24, 0x00D0
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <edit_finish+0x16>
     4d0:	79 c0       	rjmp	.+242    	; 0x5c4 <edit_finish+0x108>
     4d2:	80 91 bc 00 	lds	r24, 0x00BC
     4d6:	88 23       	and	r24, r24
     4d8:	09 f4       	brne	.+2      	; 0x4dc <edit_finish+0x20>
     4da:	74 c0       	rjmp	.+232    	; 0x5c4 <edit_finish+0x108>
				pos = 0;
				clr_lcd();
				break;
			}
		}
		pos_lcd(1, pos);
     4dc:	c4 eb       	ldi	r28, 0xB4	; 180
     4de:	d0 e0       	ldi	r29, 0x00	; 0
void edit_finish()
{
	wait_avr(1000);
	while(edit_mode && finish)
	{
		if (GET_BIT(PINC, 4) == 0)
     4e0:	9c 99       	sbic	0x13, 4	; 19
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <edit_finish+0x4e>
		{
			if(pos == 0)
     4e4:	80 91 b4 00 	lds	r24, 0x00B4
     4e8:	90 91 b5 00 	lds	r25, 0x00B5
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <edit_finish+0x3a>
			{
				edit_hr_M();
     4f0:	0e 94 2d 01 	call	0x25a	; 0x25a <edit_hr_M>
     4f4:	0a c0       	rjmp	.+20     	; 0x50a <edit_finish+0x4e>
			}
			else if (pos == 3)
     4f6:	83 30       	cpi	r24, 0x03	; 3
     4f8:	91 05       	cpc	r25, r1
     4fa:	19 f4       	brne	.+6      	; 0x502 <edit_finish+0x46>
			{
				edit_min_M();
     4fc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <edit_min_M>
     500:	04 c0       	rjmp	.+8      	; 0x50a <edit_finish+0x4e>
			}
			else if(pos == 6)
     502:	06 97       	sbiw	r24, 0x06	; 6
     504:	11 f4       	brne	.+4      	; 0x50a <edit_finish+0x4e>
			{
				edit_sec_M();
     506:	0e 94 cc 01 	call	0x398	; 0x398 <edit_sec_M>
			}
			//wait_avr(50);

		}
		if(GET_BIT(PINC, 5) == 0)
     50a:	9d 99       	sbic	0x13, 5	; 19
     50c:	13 c0       	rjmp	.+38     	; 0x534 <edit_finish+0x78>
		{
			if(pos == 0)
     50e:	80 91 b4 00 	lds	r24, 0x00B4
     512:	90 91 b5 00 	lds	r25, 0x00B5
     516:	00 97       	sbiw	r24, 0x00	; 0
     518:	19 f4       	brne	.+6      	; 0x520 <edit_finish+0x64>
			{
				edit_hr_P();
     51a:	0e 94 55 01 	call	0x2aa	; 0x2aa <edit_hr_P>
     51e:	0a c0       	rjmp	.+20     	; 0x534 <edit_finish+0x78>
			}
			else if (pos == 3)
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	91 05       	cpc	r25, r1
     524:	19 f4       	brne	.+6      	; 0x52c <edit_finish+0x70>
			{
				edit_min_P();
     526:	0e 94 a4 01 	call	0x348	; 0x348 <edit_min_P>
     52a:	04 c0       	rjmp	.+8      	; 0x534 <edit_finish+0x78>
			}
			else if(pos == 6)
     52c:	06 97       	sbiw	r24, 0x06	; 6
     52e:	11 f4       	brne	.+4      	; 0x534 <edit_finish+0x78>
			{
				edit_sec_P();
     530:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <edit_sec_P>
			}
			//wait_avr(50);
		}
		if(GET_BIT(PINC, 7) == 0)
     534:	9f 99       	sbic	0x13, 7	; 19
     536:	18 c0       	rjmp	.+48     	; 0x568 <edit_finish+0xac>
		{
			if (pos < 6)
     538:	80 91 b4 00 	lds	r24, 0x00B4
     53c:	90 91 b5 00 	lds	r25, 0x00B5
     540:	86 30       	cpi	r24, 0x06	; 6
     542:	91 05       	cpc	r25, r1
     544:	34 f4       	brge	.+12     	; 0x552 <edit_finish+0x96>
			{
				pos += 3;
     546:	03 96       	adiw	r24, 0x03	; 3
     548:	90 93 b5 00 	sts	0x00B5, r25
     54c:	80 93 b4 00 	sts	0x00B4, r24
     550:	0b c0       	rjmp	.+22     	; 0x568 <edit_finish+0xac>
			}
			else
			{
				update_edit();
     552:	0e 94 26 01 	call	0x24c	; 0x24c <update_edit>
				finish = false;
     556:	10 92 bc 00 	sts	0x00BC, r1
				pos = 0;
     55a:	10 92 b5 00 	sts	0x00B5, r1
     55e:	10 92 b4 00 	sts	0x00B4, r1
				clr_lcd();
     562:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>
				break;
     566:	2e c0       	rjmp	.+92     	; 0x5c4 <edit_finish+0x108>
			}
		}
		pos_lcd(1, pos);
     568:	68 81       	ld	r22, Y
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
		puts_lcd2("  ");
     570:	8f e6       	ldi	r24, 0x6F	; 111
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
		wait_avr(750);
     578:	8e ee       	ldi	r24, 0xEE	; 238
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		updateTime1(end_hr, end_min, end_sec);
     580:	40 91 c1 00 	lds	r20, 0x00C1
     584:	50 91 c2 00 	lds	r21, 0x00C2
     588:	60 91 b9 00 	lds	r22, 0x00B9
     58c:	70 91 ba 00 	lds	r23, 0x00BA
     590:	80 91 b7 00 	lds	r24, 0x00B7
     594:	90 91 b8 00 	lds	r25, 0x00B8
     598:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
		pos_lcd(1, 10);
     59c:	6a e0       	ldi	r22, 0x0A	; 10
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
		puts_lcd2("FINISH");
     5a4:	82 e7       	ldi	r24, 0x72	; 114
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
		wait_avr(1000);
     5ac:	88 ee       	ldi	r24, 0xE8	; 232
     5ae:	93 e0       	ldi	r25, 0x03	; 3
     5b0:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
}

void edit_finish()
{
	wait_avr(1000);
	while(edit_mode && finish)
     5b4:	80 91 d0 00 	lds	r24, 0x00D0
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <edit_finish+0x108>
     5bc:	80 91 bc 00 	lds	r24, 0x00BC
     5c0:	81 11       	cpse	r24, r1
     5c2:	8e cf       	rjmp	.-228    	; 0x4e0 <edit_finish+0x24>
		updateTime1(end_hr, end_min, end_sec);
		pos_lcd(1, 10);
		puts_lcd2("FINISH");
		wait_avr(1000);
	}
	wait_avr(1000);
     5c4:	88 ee       	ldi	r24, 0xE8	; 232
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
	pos_lcd(0,0);
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
	puts_lcd2("ALARM SET");
     5d4:	8a ea       	ldi	r24, 0xAA	; 170
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
	updateTime1();
     5dc:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
	wait_avr(1000);
     5e0:	88 ee       	ldi	r24, 0xE8	; 232
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <edit_start>:
{
	edit_mode = (edit_mode) ? false: true;
}

void edit_start()
{
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
	while(edit_mode && start)
     5f4:	80 91 d0 00 	lds	r24, 0x00D0
     5f8:	88 23       	and	r24, r24
     5fa:	09 f4       	brne	.+2      	; 0x5fe <edit_start+0x10>
     5fc:	7e c0       	rjmp	.+252    	; 0x6fa <edit_start+0x10c>
     5fe:	80 91 cf 00 	lds	r24, 0x00CF
     602:	88 23       	and	r24, r24
     604:	09 f4       	brne	.+2      	; 0x608 <edit_start+0x1a>
     606:	79 c0       	rjmp	.+242    	; 0x6fa <edit_start+0x10c>
			{
				pos += 3;
			}
			else
			{
				finish = true;
     608:	11 e0       	ldi	r17, 0x01	; 1
				start = false;
				pos = 0;
				edit_finish();
			}
		}
		pos_lcd(1, pos);
     60a:	c4 eb       	ldi	r28, 0xB4	; 180
     60c:	d0 e0       	ldi	r29, 0x00	; 0

void edit_start()
{
	while(edit_mode && start)
	{
		if (GET_BIT(PINC, 4) == 0)
     60e:	9c 99       	sbic	0x13, 4	; 19
     610:	15 c0       	rjmp	.+42     	; 0x63c <edit_start+0x4e>
		{
			if(pos == 0)
     612:	20 91 b4 00 	lds	r18, 0x00B4
     616:	30 91 b5 00 	lds	r19, 0x00B5
     61a:	21 15       	cp	r18, r1
     61c:	31 05       	cpc	r19, r1
     61e:	19 f4       	brne	.+6      	; 0x626 <edit_start+0x38>
			{
				edit_hr_M();
     620:	0e 94 2d 01 	call	0x25a	; 0x25a <edit_hr_M>
     624:	0b c0       	rjmp	.+22     	; 0x63c <edit_start+0x4e>
			}
			else if (pos == 3)
     626:	23 30       	cpi	r18, 0x03	; 3
     628:	31 05       	cpc	r19, r1
     62a:	19 f4       	brne	.+6      	; 0x632 <edit_start+0x44>
			{
				edit_min_M();
     62c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <edit_min_M>
     630:	05 c0       	rjmp	.+10     	; 0x63c <edit_start+0x4e>
			}
			else if(pos == 6)
     632:	26 30       	cpi	r18, 0x06	; 6
     634:	31 05       	cpc	r19, r1
     636:	11 f4       	brne	.+4      	; 0x63c <edit_start+0x4e>
			{
				edit_sec_M();
     638:	0e 94 cc 01 	call	0x398	; 0x398 <edit_sec_M>
			}
			//wait_avr(50);

		}
		if(GET_BIT(PINC, 5) == 0)
     63c:	9d 99       	sbic	0x13, 5	; 19
     63e:	15 c0       	rjmp	.+42     	; 0x66a <edit_start+0x7c>
		{
			if(pos == 0)
     640:	20 91 b4 00 	lds	r18, 0x00B4
     644:	30 91 b5 00 	lds	r19, 0x00B5
     648:	21 15       	cp	r18, r1
     64a:	31 05       	cpc	r19, r1
     64c:	19 f4       	brne	.+6      	; 0x654 <edit_start+0x66>
			{
				edit_hr_P();
     64e:	0e 94 55 01 	call	0x2aa	; 0x2aa <edit_hr_P>
     652:	0b c0       	rjmp	.+22     	; 0x66a <edit_start+0x7c>
			}
			else if (pos == 3)
     654:	23 30       	cpi	r18, 0x03	; 3
     656:	31 05       	cpc	r19, r1
     658:	19 f4       	brne	.+6      	; 0x660 <edit_start+0x72>
			{
				edit_min_P();
     65a:	0e 94 a4 01 	call	0x348	; 0x348 <edit_min_P>
     65e:	05 c0       	rjmp	.+10     	; 0x66a <edit_start+0x7c>
			}
			else if(pos == 6)
     660:	26 30       	cpi	r18, 0x06	; 6
     662:	31 05       	cpc	r19, r1
     664:	11 f4       	brne	.+4      	; 0x66a <edit_start+0x7c>
			{
				edit_sec_P();
     666:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <edit_sec_P>
			}
			//wait_avr(50);
		}
		if(GET_BIT(PINC, 7) == 0)
     66a:	9f 99       	sbic	0x13, 7	; 19
     66c:	18 c0       	rjmp	.+48     	; 0x69e <edit_start+0xb0>
		{
			if (pos < 6)
     66e:	20 91 b4 00 	lds	r18, 0x00B4
     672:	30 91 b5 00 	lds	r19, 0x00B5
     676:	26 30       	cpi	r18, 0x06	; 6
     678:	31 05       	cpc	r19, r1
     67a:	3c f4       	brge	.+14     	; 0x68a <edit_start+0x9c>
			{
				pos += 3;
     67c:	2d 5f       	subi	r18, 0xFD	; 253
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	30 93 b5 00 	sts	0x00B5, r19
     684:	20 93 b4 00 	sts	0x00B4, r18
     688:	0a c0       	rjmp	.+20     	; 0x69e <edit_start+0xb0>
			}
			else
			{
				finish = true;
     68a:	10 93 bc 00 	sts	0x00BC, r17
				start = false;
     68e:	10 92 cf 00 	sts	0x00CF, r1
				pos = 0;
     692:	10 92 b5 00 	sts	0x00B5, r1
     696:	10 92 b4 00 	sts	0x00B4, r1
				edit_finish();
     69a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <edit_finish>
			}
		}
		pos_lcd(1, pos);
     69e:	68 81       	ld	r22, Y
     6a0:	81 2f       	mov	r24, r17
     6a2:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
		puts_lcd2("  ");
     6a6:	8f e6       	ldi	r24, 0x6F	; 111
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
		wait_avr(750);
     6ae:	8e ee       	ldi	r24, 0xEE	; 238
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		updateTime1(start_hr, start_min, start_sec);
     6b6:	40 91 bd 00 	lds	r20, 0x00BD
     6ba:	50 91 be 00 	lds	r21, 0x00BE
     6be:	60 91 bf 00 	lds	r22, 0x00BF
     6c2:	70 91 c0 00 	lds	r23, 0x00C0
     6c6:	80 91 c7 00 	lds	r24, 0x00C7
     6ca:	90 91 c8 00 	lds	r25, 0x00C8
     6ce:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
		pos_lcd(1, 10);
     6d2:	6a e0       	ldi	r22, 0x0A	; 10
     6d4:	81 2f       	mov	r24, r17
     6d6:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
		puts_lcd2("START");
     6da:	89 e7       	ldi	r24, 0x79	; 121
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
		wait_avr(1000);
     6e2:	88 ee       	ldi	r24, 0xE8	; 232
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
	edit_mode = (edit_mode) ? false: true;
}

void edit_start()
{
	while(edit_mode && start)
     6ea:	80 91 d0 00 	lds	r24, 0x00D0
     6ee:	88 23       	and	r24, r24
     6f0:	21 f0       	breq	.+8      	; 0x6fa <edit_start+0x10c>
     6f2:	80 91 cf 00 	lds	r24, 0x00CF
     6f6:	81 11       	cpse	r24, r1
     6f8:	8a cf       	rjmp	.-236    	; 0x60e <edit_start+0x20>
		pos_lcd(1, 10);
		puts_lcd2("START");
		wait_avr(1000);
	}
	
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	08 95       	ret

00000702 <init_tripped>:
	}
}

void init_tripped()
{
	current = get_sample();
     702:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     706:	bc 01       	movw	r22, r24
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     710:	60 93 c3 00 	sts	0x00C3, r22
     714:	70 93 c4 00 	sts	0x00C4, r23
     718:	80 93 c5 00 	sts	0x00C5, r24
     71c:	90 93 c6 00 	sts	0x00C6, r25
	tripped = false;
     720:	10 92 d1 00 	sts	0x00D1, r1
     724:	08 95       	ret

00000726 <buttonListen>:
	}
}

void buttonListen()
{
	if (GET_BIT(PINC, 4) == 0)
     726:	9c 99       	sbic	0x13, 4	; 19
     728:	1e c0       	rjmp	.+60     	; 0x766 <buttonListen+0x40>
	{
		clr_lcd();
     72a:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>
		pos_lcd(0,0);
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
		puts_lcd2("ALARM OFF");
     736:	8f e7       	ldi	r24, 0x7F	; 127
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
		running = false;
     73e:	10 92 bb 00 	sts	0x00BB, r1
		tripped = false;
     742:	10 92 d1 00 	sts	0x00D1, r1
		time_run = false;
     746:	10 92 b6 00 	sts	0x00B6, r1
		updateTime1(hr, min, sec);
     74a:	40 91 cb 00 	lds	r20, 0x00CB
     74e:	50 91 cc 00 	lds	r21, 0x00CC
     752:	60 91 c9 00 	lds	r22, 0x00C9
     756:	70 91 ca 00 	lds	r23, 0x00CA
     75a:	80 91 cd 00 	lds	r24, 0x00CD
     75e:	90 91 ce 00 	lds	r25, 0x00CE
     762:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
		
	}
	if(GET_BIT(PINC, 5) == 0)
     766:	9d 99       	sbic	0x13, 5	; 19
     768:	21 c0       	rjmp	.+66     	; 0x7ac <buttonListen+0x86>
	{
		if(!tripped)
     76a:	80 91 d1 00 	lds	r24, 0x00D1
     76e:	81 11       	cpse	r24, r1
     770:	1d c0       	rjmp	.+58     	; 0x7ac <buttonListen+0x86>
		{
			clr_lcd();
     772:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>
			pos_lcd(0,0);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
			puts_lcd2("ALARM ON");
     77e:	89 e8       	ldi	r24, 0x89	; 137
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
			updateTime1(hr, min, sec);
     786:	40 91 cb 00 	lds	r20, 0x00CB
     78a:	50 91 cc 00 	lds	r21, 0x00CC
     78e:	60 91 c9 00 	lds	r22, 0x00C9
     792:	70 91 ca 00 	lds	r23, 0x00CA
     796:	80 91 cd 00 	lds	r24, 0x00CD
     79a:	90 91 ce 00 	lds	r25, 0x00CE
     79e:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
			running = true;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 bb 00 	sts	0x00BB, r24
			init_tripped();
     7a8:	0e 94 81 03 	call	0x702	; 0x702 <init_tripped>
			
		}
		
	}
	if (GET_BIT(PINC, 6) == 0)
     7ac:	9e 99       	sbic	0x13, 6	; 19
     7ae:	2b c0       	rjmp	.+86     	; 0x806 <buttonListen+0xe0>
	{
		if(!tripped)
     7b0:	80 91 d1 00 	lds	r24, 0x00D1
     7b4:	81 11       	cpse	r24, r1
     7b6:	27 c0       	rjmp	.+78     	; 0x806 <buttonListen+0xe0>
		{
			update_edit();
     7b8:	0e 94 26 01 	call	0x24c	; 0x24c <update_edit>
			if(edit_mode == true)
     7bc:	80 91 d0 00 	lds	r24, 0x00D0
     7c0:	88 23       	and	r24, r24
     7c2:	09 f1       	breq	.+66     	; 0x806 <buttonListen+0xe0>
			{
				clr_lcd();
     7c4:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>
				pos_lcd(0,0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
				puts_lcd2("SET ALARM");
     7d0:	82 e9       	ldi	r24, 0x92	; 146
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
				
				updateTime1(start_hr, start_min, start_sec);
     7d8:	40 91 bd 00 	lds	r20, 0x00BD
     7dc:	50 91 be 00 	lds	r21, 0x00BE
     7e0:	60 91 bf 00 	lds	r22, 0x00BF
     7e4:	70 91 c0 00 	lds	r23, 0x00C0
     7e8:	80 91 c7 00 	lds	r24, 0x00C7
     7ec:	90 91 c8 00 	lds	r25, 0x00C8
     7f0:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
				start = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 cf 00 	sts	0x00CF, r24
				edit_start();
     7fa:	0e 94 f7 02 	call	0x5ee	; 0x5ee <edit_start>
				wait_avr(100);
     7fe:	84 e6       	ldi	r24, 0x64	; 100
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
			}
		}
	}
	if(GET_BIT(PINC, 7) == 0)
     806:	9f 99       	sbic	0x13, 7	; 19
     808:	7d c0       	rjmp	.+250    	; 0x904 <__stack+0xa5>
	{
		if(!tripped)
     80a:	80 91 d1 00 	lds	r24, 0x00D1
     80e:	81 11       	cpse	r24, r1
     810:	79 c0       	rjmp	.+242    	; 0x904 <__stack+0xa5>
		{
			if(start_hr != end_hr || start_min != end_min || start_sec != end_sec)
     812:	20 91 c7 00 	lds	r18, 0x00C7
     816:	30 91 c8 00 	lds	r19, 0x00C8
     81a:	80 91 b7 00 	lds	r24, 0x00B7
     81e:	90 91 b8 00 	lds	r25, 0x00B8
     822:	28 17       	cp	r18, r24
     824:	39 07       	cpc	r19, r25
     826:	b9 f4       	brne	.+46     	; 0x856 <buttonListen+0x130>
     828:	20 91 bf 00 	lds	r18, 0x00BF
     82c:	30 91 c0 00 	lds	r19, 0x00C0
     830:	80 91 b9 00 	lds	r24, 0x00B9
     834:	90 91 ba 00 	lds	r25, 0x00BA
     838:	28 17       	cp	r18, r24
     83a:	39 07       	cpc	r19, r25
     83c:	61 f4       	brne	.+24     	; 0x856 <buttonListen+0x130>
     83e:	20 91 bd 00 	lds	r18, 0x00BD
     842:	30 91 be 00 	lds	r19, 0x00BE
     846:	80 91 c1 00 	lds	r24, 0x00C1
     84a:	90 91 c2 00 	lds	r25, 0x00C2
     84e:	28 17       	cp	r18, r24
     850:	39 07       	cpc	r19, r25
     852:	09 f4       	brne	.+2      	; 0x856 <buttonListen+0x130>
     854:	3f c0       	rjmp	.+126    	; 0x8d4 <__stack+0x75>
			{
				time_run = true;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 b6 00 	sts	0x00B6, r24
				clr_lcd();
     85c:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>
				pos_lcd(0,0);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
				puts_lcd2("TIME ALARM");
     868:	8c e9       	ldi	r24, 0x9C	; 156
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
				updateTime1(hr, min, sec);
     870:	40 91 cb 00 	lds	r20, 0x00CB
     874:	50 91 cc 00 	lds	r21, 0x00CC
     878:	60 91 c9 00 	lds	r22, 0x00C9
     87c:	70 91 ca 00 	lds	r23, 0x00CA
     880:	80 91 cd 00 	lds	r24, 0x00CD
     884:	90 91 ce 00 	lds	r25, 0x00CE
     888:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
				if(hr == start_hr && min == start_min && sec == start_sec)
     88c:	20 91 cd 00 	lds	r18, 0x00CD
     890:	30 91 ce 00 	lds	r19, 0x00CE
     894:	80 91 c7 00 	lds	r24, 0x00C7
     898:	90 91 c8 00 	lds	r25, 0x00C8
     89c:	28 17       	cp	r18, r24
     89e:	39 07       	cpc	r19, r25
     8a0:	89 f5       	brne	.+98     	; 0x904 <__stack+0xa5>
     8a2:	20 91 c9 00 	lds	r18, 0x00C9
     8a6:	30 91 ca 00 	lds	r19, 0x00CA
     8aa:	80 91 bf 00 	lds	r24, 0x00BF
     8ae:	90 91 c0 00 	lds	r25, 0x00C0
     8b2:	28 17       	cp	r18, r24
     8b4:	39 07       	cpc	r19, r25
     8b6:	31 f5       	brne	.+76     	; 0x904 <__stack+0xa5>
     8b8:	20 91 cb 00 	lds	r18, 0x00CB
     8bc:	30 91 cc 00 	lds	r19, 0x00CC
     8c0:	80 91 bd 00 	lds	r24, 0x00BD
     8c4:	90 91 be 00 	lds	r25, 0x00BE
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	d9 f4       	brne	.+54     	; 0x904 <__stack+0xa5>
					time_state();
     8ce:	0e 94 a7 04 	call	0x94e	; 0x94e <time_state>
     8d2:	08 95       	ret
			}
			else
			{
				clr_lcd();
     8d4:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>
				pos_lcd(0,0);
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
				puts_lcd2("NO ALARM SET");
     8e0:	87 ea       	ldi	r24, 0xA7	; 167
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
				updateTime1(hr, min, sec);
     8e8:	40 91 cb 00 	lds	r20, 0x00CB
     8ec:	50 91 cc 00 	lds	r21, 0x00CC
     8f0:	60 91 c9 00 	lds	r22, 0x00C9
     8f4:	70 91 ca 00 	lds	r23, 0x00CA
     8f8:	80 91 cd 00 	lds	r24, 0x00CD
     8fc:	90 91 ce 00 	lds	r25, 0x00CE
     900:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
     904:	08 95       	ret

00000906 <play_note>:
		
	}
}

void play_note(unsigned char freq, unsigned char duration)
{
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
	int i;
	unsigned char tempo = 1;
	for(i = 0; i < duration; i++)
     912:	e6 2e       	mov	r14, r22
     914:	f1 2c       	mov	r15, r1
     916:	1e 14       	cp	r1, r14
     918:	1f 04       	cpc	r1, r15
     91a:	94 f4       	brge	.+36     	; 0x940 <play_note+0x3a>
     91c:	c0 e0       	ldi	r28, 0x00	; 0
     91e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SET_BIT(PORTA, 1);
		wait_avr(freq * tempo);
     920:	08 2f       	mov	r16, r24
     922:	10 e0       	ldi	r17, 0x00	; 0
{
	int i;
	unsigned char tempo = 1;
	for(i = 0; i < duration; i++)
	{
		SET_BIT(PORTA, 1);
     924:	d9 9a       	sbi	0x1b, 1	; 27
		wait_avr(freq * tempo);
     926:	c8 01       	movw	r24, r16
     928:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		CLR_BIT(PORTA, 1);
     92c:	d9 98       	cbi	0x1b, 1	; 27
		wait_avr(freq * tempo);
     92e:	c8 01       	movw	r24, r16
     930:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		buttonListen();
     934:	0e 94 93 03 	call	0x726	; 0x726 <buttonListen>

void play_note(unsigned char freq, unsigned char duration)
{
	int i;
	unsigned char tempo = 1;
	for(i = 0; i < duration; i++)
     938:	21 96       	adiw	r28, 0x01	; 1
     93a:	ce 15       	cp	r28, r14
     93c:	df 05       	cpc	r29, r15
     93e:	94 f3       	brlt	.-28     	; 0x924 <play_note+0x1e>
		wait_avr(freq * tempo);
		CLR_BIT(PORTA, 1);
		wait_avr(freq * tempo);
		buttonListen();
	}
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <time_state>:
		end_sec = (end_sec < 59) ? end_sec + 1 : 0;
	}
}

void time_state()
{
     94e:	2f 92       	push	r2
     950:	3f 92       	push	r3
     952:	4f 92       	push	r4
     954:	5f 92       	push	r5
     956:	6f 92       	push	r6
     958:	7f 92       	push	r7
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
	pos_lcd(1, 12);
     972:	6c e0       	ldi	r22, 0x0C	; 12
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
	puts_lcd2("ON");
     97a:	8f e8       	ldi	r24, 0x8F	; 143
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
	current = get_sample();
     982:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     986:	bc 01       	movw	r22, r24
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     990:	60 93 c3 00 	sts	0x00C3, r22
     994:	70 93 c4 00 	sts	0x00C4, r23
     998:	80 93 c5 00 	sts	0x00C5, r24
     99c:	90 93 c6 00 	sts	0x00C6, r25
	int runtime_hr, runtime_min, runtime_sec, ini_hr = 0, ini_min = 0, ini_sec = 0;
	if(end_hr < start_hr)
     9a0:	c0 90 b7 00 	lds	r12, 0x00B7
     9a4:	d0 90 b8 00 	lds	r13, 0x00B8
     9a8:	80 91 c7 00 	lds	r24, 0x00C7
     9ac:	90 91 c8 00 	lds	r25, 0x00C8
     9b0:	c8 16       	cp	r12, r24
     9b2:	d9 06       	cpc	r13, r25
     9b4:	3c f4       	brge	.+14     	; 0x9c4 <time_state+0x76>
		runtime_hr = 24 - start_hr + end_hr;
     9b6:	96 01       	movw	r18, r12
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	28 5e       	subi	r18, 0xE8	; 232
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	69 01       	movw	r12, r18
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <time_state+0x7a>
	else
		runtime_hr = end_hr - start_hr;
     9c4:	c8 1a       	sub	r12, r24
     9c6:	d9 0a       	sbc	r13, r25
	if(end_min < start_min)
     9c8:	a0 90 b9 00 	lds	r10, 0x00B9
     9cc:	b0 90 ba 00 	lds	r11, 0x00BA
     9d0:	80 91 bf 00 	lds	r24, 0x00BF
     9d4:	90 91 c0 00 	lds	r25, 0x00C0
     9d8:	a8 16       	cp	r10, r24
     9da:	b9 06       	cpc	r11, r25
     9dc:	3c f4       	brge	.+14     	; 0x9ec <time_state+0x9e>
		runtime_min = 60 - start_min + end_min;
     9de:	95 01       	movw	r18, r10
     9e0:	28 1b       	sub	r18, r24
     9e2:	39 0b       	sbc	r19, r25
     9e4:	24 5c       	subi	r18, 0xC4	; 196
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
     9e8:	59 01       	movw	r10, r18
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <time_state+0xa2>
	else
		runtime_min = end_min - start_min;
     9ec:	a8 1a       	sub	r10, r24
     9ee:	b9 0a       	sbc	r11, r25
	if(end_sec < start_sec)
     9f0:	80 90 c1 00 	lds	r8, 0x00C1
     9f4:	90 90 c2 00 	lds	r9, 0x00C2
     9f8:	80 91 bd 00 	lds	r24, 0x00BD
     9fc:	90 91 be 00 	lds	r25, 0x00BE
     a00:	88 16       	cp	r8, r24
     a02:	99 06       	cpc	r9, r25
     a04:	84 f4       	brge	.+32     	; 0xa26 <time_state+0xd8>
		runtime_sec = 60 - start_sec + end_sec;
     a06:	94 01       	movw	r18, r8
     a08:	28 1b       	sub	r18, r24
     a0a:	39 0b       	sbc	r19, r25
     a0c:	24 5c       	subi	r18, 0xC4	; 196
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	49 01       	movw	r8, r18
	else 
		runtime_sec = end_sec - start_sec;
	while(ini_hr <= runtime_hr && ini_min <= runtime_min && ini_sec < runtime_sec)
     a12:	dd 20       	and	r13, r13
     a14:	0c f4       	brge	.+2      	; 0xa18 <time_state+0xca>
     a16:	99 c0       	rjmp	.+306    	; 0xb4a <time_state+0x1fc>
     a18:	bb 20       	and	r11, r11
     a1a:	0c f4       	brge	.+2      	; 0xa1e <time_state+0xd0>
     a1c:	96 c0       	rjmp	.+300    	; 0xb4a <time_state+0x1fc>
     a1e:	18 14       	cp	r1, r8
     a20:	19 04       	cpc	r1, r9
     a22:	24 f0       	brlt	.+8      	; 0xa2c <time_state+0xde>
     a24:	92 c0       	rjmp	.+292    	; 0xb4a <time_state+0x1fc>
	else
		runtime_min = end_min - start_min;
	if(end_sec < start_sec)
		runtime_sec = 60 - start_sec + end_sec;
	else 
		runtime_sec = end_sec - start_sec;
     a26:	88 1a       	sub	r8, r24
     a28:	99 0a       	sbc	r9, r25
     a2a:	f3 cf       	rjmp	.-26     	; 0xa12 <time_state+0xc4>
	while(ini_hr <= runtime_hr && ini_min <= runtime_min && ini_sec < runtime_sec)
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	00 e0       	ldi	r16, 0x00	; 0
     a32:	10 e0       	ldi	r17, 0x00	; 0
     a34:	e1 2c       	mov	r14, r1
     a36:	f1 2c       	mov	r15, r1
	{
		//buttonListen();
		if(get_sample() > current + 20 || get_sample() < current - 20)
			tripped = true;
     a38:	33 24       	eor	r3, r3
     a3a:	33 94       	inc	r3
			play_note(1, 10);
		else
		{
			if(ini_sec >= 59)
			{
				ini_sec = 0;
     a3c:	21 2c       	mov	r2, r1
	else 
		runtime_sec = end_sec - start_sec;
	while(ini_hr <= runtime_hr && ini_min <= runtime_min && ini_sec < runtime_sec)
	{
		//buttonListen();
		if(get_sample() > current + 20 || get_sample() < current - 20)
     a3e:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     a42:	bc 01       	movw	r22, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     a4c:	2b 01       	movw	r4, r22
     a4e:	3c 01       	movw	r6, r24
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 ea       	ldi	r20, 0xA0	; 160
     a56:	51 e4       	ldi	r21, 0x41	; 65
     a58:	60 91 c3 00 	lds	r22, 0x00C3
     a5c:	70 91 c4 00 	lds	r23, 0x00C4
     a60:	80 91 c5 00 	lds	r24, 0x00C5
     a64:	90 91 c6 00 	lds	r25, 0x00C6
     a68:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	c3 01       	movw	r24, r6
     a72:	b2 01       	movw	r22, r4
     a74:	0e 94 a9 07 	call	0xf52	; 0xf52 <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	fc f0       	brlt	.+62     	; 0xaba <time_state+0x16c>
     a7c:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     a80:	bc 01       	movw	r22, r24
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     a8a:	2b 01       	movw	r4, r22
     a8c:	3c 01       	movw	r6, r24
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 ea       	ldi	r20, 0xA0	; 160
     a94:	51 e4       	ldi	r21, 0x41	; 65
     a96:	60 91 c3 00 	lds	r22, 0x00C3
     a9a:	70 91 c4 00 	lds	r23, 0x00C4
     a9e:	80 91 c5 00 	lds	r24, 0x00C5
     aa2:	90 91 c6 00 	lds	r25, 0x00C6
     aa6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__subsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c3 01       	movw	r24, r6
     ab0:	b2 01       	movw	r22, r4
     ab2:	0e 94 f3 06 	call	0xde6	; 0xde6 <__cmpsf2>
     ab6:	88 23       	and	r24, r24
     ab8:	1c f4       	brge	.+6      	; 0xac0 <time_state+0x172>
			tripped = true;
     aba:	30 92 d1 00 	sts	0x00D1, r3
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <time_state+0x17a>
		if (tripped)
     ac0:	80 91 d1 00 	lds	r24, 0x00D1
     ac4:	88 23       	and	r24, r24
     ac6:	39 f0       	breq	.+14     	; 0xad6 <time_state+0x188>
			play_note(1, 10);
     ac8:	6a e0       	ldi	r22, 0x0A	; 10
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 83 04 	call	0x906	; 0x906 <play_note>
     ad4:	30 c0       	rjmp	.+96     	; 0xb36 <time_state+0x1e8>
		else
		{
			if(ini_sec >= 59)
     ad6:	cb 33       	cpi	r28, 0x3B	; 59
     ad8:	d1 05       	cpc	r29, r1
     ada:	44 f1       	brlt	.+80     	; 0xb2c <time_state+0x1de>
			{
				ini_sec = 0;
				if(ini_min >= 59)
     adc:	0b 33       	cpi	r16, 0x3B	; 59
     ade:	11 05       	cpc	r17, r1
     ae0:	fc f0       	brlt	.+62     	; 0xb20 <time_state+0x1d2>
				{
					ini_min = 0;
					if(ini_hr >= 23)
     ae2:	37 e1       	ldi	r19, 0x17	; 23
     ae4:	e3 16       	cp	r14, r19
     ae6:	f1 04       	cpc	r15, r1
     ae8:	24 f4       	brge	.+8      	; 0xaf2 <time_state+0x1a4>
					{
						ini_hr = 0;
					}
					else
					{
						ini_hr++;
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	e8 1a       	sub	r14, r24
     aee:	f8 0a       	sbc	r15, r24
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <time_state+0x1a8>
				if(ini_min >= 59)
				{
					ini_min = 0;
					if(ini_hr >= 23)
					{
						ini_hr = 0;
     af2:	e2 2c       	mov	r14, r2
     af4:	f1 2c       	mov	r15, r1
					}
					else
					{
						ini_hr++;
					}
					current = get_sample();
     af6:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     afa:	bc 01       	movw	r22, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     b04:	60 93 c3 00 	sts	0x00C3, r22
     b08:	70 93 c4 00 	sts	0x00C4, r23
     b0c:	80 93 c5 00 	sts	0x00C5, r24
     b10:	90 93 c6 00 	sts	0x00C6, r25
			play_note(1, 10);
		else
		{
			if(ini_sec >= 59)
			{
				ini_sec = 0;
     b14:	c2 2d       	mov	r28, r2
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	d3 2f       	mov	r29, r19
				if(ini_min >= 59)
				{
					ini_min = 0;
     b1a:	02 2d       	mov	r16, r2
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <time_state+0x1e0>
					}
					current = get_sample();
				}
				else
				{
					ini_min++;
     b20:	0f 5f       	subi	r16, 0xFF	; 255
     b22:	1f 4f       	sbci	r17, 0xFF	; 255
			play_note(1, 10);
		else
		{
			if(ini_sec >= 59)
			{
				ini_sec = 0;
     b24:	c2 2d       	mov	r28, r2
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	d2 2f       	mov	r29, r18
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <time_state+0x1e0>
					ini_min++;
				}
			}
			else
			{
				ini_sec++;
     b2c:	21 96       	adiw	r28, 0x01	; 1
			}
			wait_avr(100);
     b2e:	84 e6       	ldi	r24, 0x64	; 100
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
		runtime_min = end_min - start_min;
	if(end_sec < start_sec)
		runtime_sec = 60 - start_sec + end_sec;
	else 
		runtime_sec = end_sec - start_sec;
	while(ini_hr <= runtime_hr && ini_min <= runtime_min && ini_sec < runtime_sec)
     b36:	ce 14       	cp	r12, r14
     b38:	df 04       	cpc	r13, r15
     b3a:	3c f0       	brlt	.+14     	; 0xb4a <time_state+0x1fc>
     b3c:	a0 16       	cp	r10, r16
     b3e:	b1 06       	cpc	r11, r17
     b40:	24 f0       	brlt	.+8      	; 0xb4a <time_state+0x1fc>
     b42:	c8 15       	cp	r28, r8
     b44:	d9 05       	cpc	r29, r9
     b46:	0c f4       	brge	.+2      	; 0xb4a <time_state+0x1fc>
     b48:	7a cf       	rjmp	.-268    	; 0xa3e <time_state+0xf0>
			}
			wait_avr(100);
		}
		
	}
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	5f 90       	pop	r5
     b68:	4f 90       	pop	r4
     b6a:	3f 90       	pop	r3
     b6c:	2f 90       	pop	r2
     b6e:	08 95       	ret

00000b70 <militaryTime>:

void militaryTime()
{
	//while(1)
	{
		buttonListen();
     b70:	0e 94 93 03 	call	0x726	; 0x726 <buttonListen>
		if(sec >= 59)
     b74:	80 91 cb 00 	lds	r24, 0x00CB
     b78:	90 91 cc 00 	lds	r25, 0x00CC
     b7c:	8b 33       	cpi	r24, 0x3B	; 59
     b7e:	91 05       	cpc	r25, r1
     b80:	b4 f1       	brlt	.+108    	; 0xbee <militaryTime+0x7e>
		{
			sec = 0;
     b82:	10 92 cc 00 	sts	0x00CC, r1
     b86:	10 92 cb 00 	sts	0x00CB, r1
			if(min >= 59)
     b8a:	80 91 c9 00 	lds	r24, 0x00C9
     b8e:	90 91 ca 00 	lds	r25, 0x00CA
     b92:	8b 33       	cpi	r24, 0x3B	; 59
     b94:	91 05       	cpc	r25, r1
     b96:	2c f1       	brlt	.+74     	; 0xbe2 <militaryTime+0x72>
			{
				min = 0;
     b98:	10 92 ca 00 	sts	0x00CA, r1
     b9c:	10 92 c9 00 	sts	0x00C9, r1
				if(hr >= 23)
     ba0:	80 91 cd 00 	lds	r24, 0x00CD
     ba4:	90 91 ce 00 	lds	r25, 0x00CE
     ba8:	87 31       	cpi	r24, 0x17	; 23
     baa:	91 05       	cpc	r25, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <militaryTime+0x48>
				{
					hr = 0;
     bae:	10 92 ce 00 	sts	0x00CE, r1
     bb2:	10 92 cd 00 	sts	0x00CD, r1
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <militaryTime+0x52>
				}
				else
				{
					hr++;
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 ce 00 	sts	0x00CE, r25
     bbe:	80 93 cd 00 	sts	0x00CD, r24
				}
				current = get_sample();
     bc2:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     bc6:	bc 01       	movw	r22, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     bd0:	60 93 c3 00 	sts	0x00C3, r22
     bd4:	70 93 c4 00 	sts	0x00C4, r23
     bd8:	80 93 c5 00 	sts	0x00C5, r24
     bdc:	90 93 c6 00 	sts	0x00C6, r25
     be0:	0b c0       	rjmp	.+22     	; 0xbf8 <militaryTime+0x88>
			}
			else
			{
				min++;
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	90 93 ca 00 	sts	0x00CA, r25
     be8:	80 93 c9 00 	sts	0x00C9, r24
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <militaryTime+0x88>
			}
		}
		else
		{
			sec++;
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	90 93 cc 00 	sts	0x00CC, r25
     bf4:	80 93 cb 00 	sts	0x00CB, r24
		}
		updateTime1(hr, min, sec);
     bf8:	40 91 cb 00 	lds	r20, 0x00CB
     bfc:	50 91 cc 00 	lds	r21, 0x00CC
     c00:	60 91 c9 00 	lds	r22, 0x00C9
     c04:	70 91 ca 00 	lds	r23, 0x00CA
     c08:	80 91 cd 00 	lds	r24, 0x00CD
     c0c:	90 91 ce 00 	lds	r25, 0x00CE
     c10:	0e 94 1c 02 	call	0x438	; 0x438 <updateTime1>
		wait_avr(100);
     c14:	84 e6       	ldi	r24, 0x64	; 100
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     c1c:	08 95       	ret

00000c1e <init>:
	tripped = false;
}

void init()
{
		SET_BIT(DDRA,0);
     c1e:	d0 9a       	sbi	0x1a, 0	; 26
		SET_BIT(DDRA,1);
     c20:	d1 9a       	sbi	0x1a, 1	; 26
		init_adc();
     c22:	0e 94 ca 00 	call	0x194	; 0x194 <init_adc>
		ini_lcd();
     c26:	0e 94 78 00 	call	0xf0	; 0xf0 <ini_lcd>
		clr_lcd();
     c2a:	0e 94 a0 00 	call	0x140	; 0x140 <clr_lcd>

		init_tripped();
     c2e:	0e 94 81 03 	call	0x702	; 0x702 <init_tripped>
		current = get_sample();
     c32:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     c36:	bc 01       	movw	r22, r24
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     c40:	60 93 c3 00 	sts	0x00C3, r22
     c44:	70 93 c4 00 	sts	0x00C4, r23
     c48:	80 93 c5 00 	sts	0x00C5, r24
     c4c:	90 93 c6 00 	sts	0x00C6, r25
		pos_lcd(0,0);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	0e 94 a5 00 	call	0x14a	; 0x14a <pos_lcd>
		puts_lcd2("ALARM OFF");
     c58:	8f e7       	ldi	r24, 0x7F	; 127
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 b9 00 	call	0x172	; 0x172 <puts_lcd2>
     c60:	08 95       	ret

00000c62 <main>:
}

int main(void)
{
	init();
     c62:	0e 94 0f 06 	call	0xc1e	; 0xc1e <init>
	
    while(1)
    {
		militaryTime();
     c66:	0e 94 b8 05 	call	0xb70	; 0xb70 <militaryTime>
		init_keypad();
     c6a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <init_keypad>
		buttonListen();
     c6e:	0e 94 93 03 	call	0x726	; 0x726 <buttonListen>
		
		while(running)
     c72:	4f c0       	rjmp	.+158    	; 0xd12 <main+0xb0>
		{
			buttonListen();
     c74:	0e 94 93 03 	call	0x726	; 0x726 <buttonListen>
			if(get_sample() > current + 20 || get_sample() < current - 20)
     c78:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     c7c:	bc 01       	movw	r22, r24
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     c86:	6b 01       	movw	r12, r22
     c88:	7c 01       	movw	r14, r24
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 ea       	ldi	r20, 0xA0	; 160
     c90:	51 e4       	ldi	r21, 0x41	; 65
     c92:	60 91 c3 00 	lds	r22, 0x00C3
     c96:	70 91 c4 00 	lds	r23, 0x00C4
     c9a:	80 91 c5 00 	lds	r24, 0x00C5
     c9e:	90 91 c6 00 	lds	r25, 0x00C6
     ca2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	c7 01       	movw	r24, r14
     cac:	b6 01       	movw	r22, r12
     cae:	0e 94 a9 07 	call	0xf52	; 0xf52 <__gesf2>
     cb2:	18 16       	cp	r1, r24
     cb4:	fc f0       	brlt	.+62     	; 0xcf4 <main+0x92>
     cb6:	0e 94 cf 00 	call	0x19e	; 0x19e <get_sample>
     cba:	bc 01       	movw	r22, r24
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatunsisf>
     cc4:	6b 01       	movw	r12, r22
     cc6:	7c 01       	movw	r14, r24
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 ea       	ldi	r20, 0xA0	; 160
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	60 91 c3 00 	lds	r22, 0x00C3
     cd4:	70 91 c4 00 	lds	r23, 0x00C4
     cd8:	80 91 c5 00 	lds	r24, 0x00C5
     cdc:	90 91 c6 00 	lds	r25, 0x00C6
     ce0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__subsf3>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	0e 94 f3 06 	call	0xde6	; 0xde6 <__cmpsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	24 f4       	brge	.+8      	; 0xcfc <main+0x9a>
				tripped = true;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 d1 00 	sts	0x00D1, r24
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <main+0xa2>
			if (tripped)
     cfc:	80 91 d1 00 	lds	r24, 0x00D1
     d00:	88 23       	and	r24, r24
     d02:	29 f0       	breq	.+10     	; 0xd0e <main+0xac>
				play_note(1, 10);
     d04:	6a e0       	ldi	r22, 0x0A	; 10
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 83 04 	call	0x906	; 0x906 <play_note>
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <main+0xb0>
			else
				militaryTime();
     d0e:	0e 94 b8 05 	call	0xb70	; 0xb70 <militaryTime>
    {
		militaryTime();
		init_keypad();
		buttonListen();
		
		while(running)
     d12:	80 91 bb 00 	lds	r24, 0x00BB
     d16:	81 11       	cpse	r24, r1
     d18:	ad cf       	rjmp	.-166    	; 0xc74 <main+0x12>
     d1a:	a5 cf       	rjmp	.-182    	; 0xc66 <main+0x4>

00000d1c <__subsf3>:
     d1c:	50 58       	subi	r21, 0x80	; 128

00000d1e <__addsf3>:
     d1e:	bb 27       	eor	r27, r27
     d20:	aa 27       	eor	r26, r26
     d22:	0e d0       	rcall	.+28     	; 0xd40 <__addsf3x>
     d24:	dc c0       	rjmp	.+440    	; 0xede <__fp_round>
     d26:	cd d0       	rcall	.+410    	; 0xec2 <__fp_pscA>
     d28:	30 f0       	brcs	.+12     	; 0xd36 <__addsf3+0x18>
     d2a:	d2 d0       	rcall	.+420    	; 0xed0 <__fp_pscB>
     d2c:	20 f0       	brcs	.+8      	; 0xd36 <__addsf3+0x18>
     d2e:	31 f4       	brne	.+12     	; 0xd3c <__addsf3+0x1e>
     d30:	9f 3f       	cpi	r25, 0xFF	; 255
     d32:	11 f4       	brne	.+4      	; 0xd38 <__addsf3+0x1a>
     d34:	1e f4       	brtc	.+6      	; 0xd3c <__addsf3+0x1e>
     d36:	c2 c0       	rjmp	.+388    	; 0xebc <__fp_nan>
     d38:	0e f4       	brtc	.+2      	; 0xd3c <__addsf3+0x1e>
     d3a:	e0 95       	com	r30
     d3c:	e7 fb       	bst	r30, 7
     d3e:	b8 c0       	rjmp	.+368    	; 0xeb0 <__fp_inf>

00000d40 <__addsf3x>:
     d40:	e9 2f       	mov	r30, r25
     d42:	de d0       	rcall	.+444    	; 0xf00 <__fp_split3>
     d44:	80 f3       	brcs	.-32     	; 0xd26 <__addsf3+0x8>
     d46:	ba 17       	cp	r27, r26
     d48:	62 07       	cpc	r22, r18
     d4a:	73 07       	cpc	r23, r19
     d4c:	84 07       	cpc	r24, r20
     d4e:	95 07       	cpc	r25, r21
     d50:	18 f0       	brcs	.+6      	; 0xd58 <__addsf3x+0x18>
     d52:	71 f4       	brne	.+28     	; 0xd70 <__addsf3x+0x30>
     d54:	9e f5       	brtc	.+102    	; 0xdbc <__addsf3x+0x7c>
     d56:	f6 c0       	rjmp	.+492    	; 0xf44 <__fp_zero>
     d58:	0e f4       	brtc	.+2      	; 0xd5c <__addsf3x+0x1c>
     d5a:	e0 95       	com	r30
     d5c:	0b 2e       	mov	r0, r27
     d5e:	ba 2f       	mov	r27, r26
     d60:	a0 2d       	mov	r26, r0
     d62:	0b 01       	movw	r0, r22
     d64:	b9 01       	movw	r22, r18
     d66:	90 01       	movw	r18, r0
     d68:	0c 01       	movw	r0, r24
     d6a:	ca 01       	movw	r24, r20
     d6c:	a0 01       	movw	r20, r0
     d6e:	11 24       	eor	r1, r1
     d70:	ff 27       	eor	r31, r31
     d72:	59 1b       	sub	r21, r25
     d74:	99 f0       	breq	.+38     	; 0xd9c <__addsf3x+0x5c>
     d76:	59 3f       	cpi	r21, 0xF9	; 249
     d78:	50 f4       	brcc	.+20     	; 0xd8e <__addsf3x+0x4e>
     d7a:	50 3e       	cpi	r21, 0xE0	; 224
     d7c:	68 f1       	brcs	.+90     	; 0xdd8 <__addsf3x+0x98>
     d7e:	1a 16       	cp	r1, r26
     d80:	f0 40       	sbci	r31, 0x00	; 0
     d82:	a2 2f       	mov	r26, r18
     d84:	23 2f       	mov	r18, r19
     d86:	34 2f       	mov	r19, r20
     d88:	44 27       	eor	r20, r20
     d8a:	58 5f       	subi	r21, 0xF8	; 248
     d8c:	f3 cf       	rjmp	.-26     	; 0xd74 <__addsf3x+0x34>
     d8e:	46 95       	lsr	r20
     d90:	37 95       	ror	r19
     d92:	27 95       	ror	r18
     d94:	a7 95       	ror	r26
     d96:	f0 40       	sbci	r31, 0x00	; 0
     d98:	53 95       	inc	r21
     d9a:	c9 f7       	brne	.-14     	; 0xd8e <__addsf3x+0x4e>
     d9c:	7e f4       	brtc	.+30     	; 0xdbc <__addsf3x+0x7c>
     d9e:	1f 16       	cp	r1, r31
     da0:	ba 0b       	sbc	r27, r26
     da2:	62 0b       	sbc	r22, r18
     da4:	73 0b       	sbc	r23, r19
     da6:	84 0b       	sbc	r24, r20
     da8:	ba f0       	brmi	.+46     	; 0xdd8 <__addsf3x+0x98>
     daa:	91 50       	subi	r25, 0x01	; 1
     dac:	a1 f0       	breq	.+40     	; 0xdd6 <__addsf3x+0x96>
     dae:	ff 0f       	add	r31, r31
     db0:	bb 1f       	adc	r27, r27
     db2:	66 1f       	adc	r22, r22
     db4:	77 1f       	adc	r23, r23
     db6:	88 1f       	adc	r24, r24
     db8:	c2 f7       	brpl	.-16     	; 0xdaa <__addsf3x+0x6a>
     dba:	0e c0       	rjmp	.+28     	; 0xdd8 <__addsf3x+0x98>
     dbc:	ba 0f       	add	r27, r26
     dbe:	62 1f       	adc	r22, r18
     dc0:	73 1f       	adc	r23, r19
     dc2:	84 1f       	adc	r24, r20
     dc4:	48 f4       	brcc	.+18     	; 0xdd8 <__addsf3x+0x98>
     dc6:	87 95       	ror	r24
     dc8:	77 95       	ror	r23
     dca:	67 95       	ror	r22
     dcc:	b7 95       	ror	r27
     dce:	f7 95       	ror	r31
     dd0:	9e 3f       	cpi	r25, 0xFE	; 254
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <__addsf3x+0x96>
     dd4:	b3 cf       	rjmp	.-154    	; 0xd3c <__addsf3+0x1e>
     dd6:	93 95       	inc	r25
     dd8:	88 0f       	add	r24, r24
     dda:	08 f0       	brcs	.+2      	; 0xdde <__addsf3x+0x9e>
     ddc:	99 27       	eor	r25, r25
     dde:	ee 0f       	add	r30, r30
     de0:	97 95       	ror	r25
     de2:	87 95       	ror	r24
     de4:	08 95       	ret

00000de6 <__cmpsf2>:
     de6:	40 d0       	rcall	.+128    	; 0xe68 <__fp_cmp>
     de8:	08 f4       	brcc	.+2      	; 0xdec <__cmpsf2+0x6>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	08 95       	ret

00000dee <__floatunsisf>:
     dee:	e8 94       	clt
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <__floatsisf+0x12>

00000df2 <__floatsisf>:
     df2:	97 fb       	bst	r25, 7
     df4:	3e f4       	brtc	.+14     	; 0xe04 <__floatsisf+0x12>
     df6:	90 95       	com	r25
     df8:	80 95       	com	r24
     dfa:	70 95       	com	r23
     dfc:	61 95       	neg	r22
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	99 23       	and	r25, r25
     e06:	a9 f0       	breq	.+42     	; 0xe32 <__floatsisf+0x40>
     e08:	f9 2f       	mov	r31, r25
     e0a:	96 e9       	ldi	r25, 0x96	; 150
     e0c:	bb 27       	eor	r27, r27
     e0e:	93 95       	inc	r25
     e10:	f6 95       	lsr	r31
     e12:	87 95       	ror	r24
     e14:	77 95       	ror	r23
     e16:	67 95       	ror	r22
     e18:	b7 95       	ror	r27
     e1a:	f1 11       	cpse	r31, r1
     e1c:	f8 cf       	rjmp	.-16     	; 0xe0e <__floatsisf+0x1c>
     e1e:	fa f4       	brpl	.+62     	; 0xe5e <__floatsisf+0x6c>
     e20:	bb 0f       	add	r27, r27
     e22:	11 f4       	brne	.+4      	; 0xe28 <__floatsisf+0x36>
     e24:	60 ff       	sbrs	r22, 0
     e26:	1b c0       	rjmp	.+54     	; 0xe5e <__floatsisf+0x6c>
     e28:	6f 5f       	subi	r22, 0xFF	; 255
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	8f 4f       	sbci	r24, 0xFF	; 255
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <__floatsisf+0x6c>
     e32:	88 23       	and	r24, r24
     e34:	11 f0       	breq	.+4      	; 0xe3a <__floatsisf+0x48>
     e36:	96 e9       	ldi	r25, 0x96	; 150
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <__floatsisf+0x6a>
     e3a:	77 23       	and	r23, r23
     e3c:	21 f0       	breq	.+8      	; 0xe46 <__floatsisf+0x54>
     e3e:	9e e8       	ldi	r25, 0x8E	; 142
     e40:	87 2f       	mov	r24, r23
     e42:	76 2f       	mov	r23, r22
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <__floatsisf+0x5e>
     e46:	66 23       	and	r22, r22
     e48:	71 f0       	breq	.+28     	; 0xe66 <__floatsisf+0x74>
     e4a:	96 e8       	ldi	r25, 0x86	; 134
     e4c:	86 2f       	mov	r24, r22
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	2a f0       	brmi	.+10     	; 0xe5e <__floatsisf+0x6c>
     e54:	9a 95       	dec	r25
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	88 1f       	adc	r24, r24
     e5c:	da f7       	brpl	.-10     	; 0xe54 <__floatsisf+0x62>
     e5e:	88 0f       	add	r24, r24
     e60:	96 95       	lsr	r25
     e62:	87 95       	ror	r24
     e64:	97 f9       	bld	r25, 7
     e66:	08 95       	ret

00000e68 <__fp_cmp>:
     e68:	99 0f       	add	r25, r25
     e6a:	00 08       	sbc	r0, r0
     e6c:	55 0f       	add	r21, r21
     e6e:	aa 0b       	sbc	r26, r26
     e70:	e0 e8       	ldi	r30, 0x80	; 128
     e72:	fe ef       	ldi	r31, 0xFE	; 254
     e74:	16 16       	cp	r1, r22
     e76:	17 06       	cpc	r1, r23
     e78:	e8 07       	cpc	r30, r24
     e7a:	f9 07       	cpc	r31, r25
     e7c:	c0 f0       	brcs	.+48     	; 0xeae <__fp_cmp+0x46>
     e7e:	12 16       	cp	r1, r18
     e80:	13 06       	cpc	r1, r19
     e82:	e4 07       	cpc	r30, r20
     e84:	f5 07       	cpc	r31, r21
     e86:	98 f0       	brcs	.+38     	; 0xeae <__fp_cmp+0x46>
     e88:	62 1b       	sub	r22, r18
     e8a:	73 0b       	sbc	r23, r19
     e8c:	84 0b       	sbc	r24, r20
     e8e:	95 0b       	sbc	r25, r21
     e90:	39 f4       	brne	.+14     	; 0xea0 <__fp_cmp+0x38>
     e92:	0a 26       	eor	r0, r26
     e94:	61 f0       	breq	.+24     	; 0xeae <__fp_cmp+0x46>
     e96:	23 2b       	or	r18, r19
     e98:	24 2b       	or	r18, r20
     e9a:	25 2b       	or	r18, r21
     e9c:	21 f4       	brne	.+8      	; 0xea6 <__fp_cmp+0x3e>
     e9e:	08 95       	ret
     ea0:	0a 26       	eor	r0, r26
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__fp_cmp+0x3e>
     ea4:	a1 40       	sbci	r26, 0x01	; 1
     ea6:	a6 95       	lsr	r26
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	81 1d       	adc	r24, r1
     eac:	81 1d       	adc	r24, r1
     eae:	08 95       	ret

00000eb0 <__fp_inf>:
     eb0:	97 f9       	bld	r25, 7
     eb2:	9f 67       	ori	r25, 0x7F	; 127
     eb4:	80 e8       	ldi	r24, 0x80	; 128
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	08 95       	ret

00000ebc <__fp_nan>:
     ebc:	9f ef       	ldi	r25, 0xFF	; 255
     ebe:	80 ec       	ldi	r24, 0xC0	; 192
     ec0:	08 95       	ret

00000ec2 <__fp_pscA>:
     ec2:	00 24       	eor	r0, r0
     ec4:	0a 94       	dec	r0
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	18 06       	cpc	r1, r24
     ecc:	09 06       	cpc	r0, r25
     ece:	08 95       	ret

00000ed0 <__fp_pscB>:
     ed0:	00 24       	eor	r0, r0
     ed2:	0a 94       	dec	r0
     ed4:	12 16       	cp	r1, r18
     ed6:	13 06       	cpc	r1, r19
     ed8:	14 06       	cpc	r1, r20
     eda:	05 06       	cpc	r0, r21
     edc:	08 95       	ret

00000ede <__fp_round>:
     ede:	09 2e       	mov	r0, r25
     ee0:	03 94       	inc	r0
     ee2:	00 0c       	add	r0, r0
     ee4:	11 f4       	brne	.+4      	; 0xeea <__fp_round+0xc>
     ee6:	88 23       	and	r24, r24
     ee8:	52 f0       	brmi	.+20     	; 0xefe <__fp_round+0x20>
     eea:	bb 0f       	add	r27, r27
     eec:	40 f4       	brcc	.+16     	; 0xefe <__fp_round+0x20>
     eee:	bf 2b       	or	r27, r31
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__fp_round+0x18>
     ef2:	60 ff       	sbrs	r22, 0
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <__fp_round+0x20>
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	08 95       	ret

00000f00 <__fp_split3>:
     f00:	57 fd       	sbrc	r21, 7
     f02:	90 58       	subi	r25, 0x80	; 128
     f04:	44 0f       	add	r20, r20
     f06:	55 1f       	adc	r21, r21
     f08:	59 f0       	breq	.+22     	; 0xf20 <__fp_splitA+0x10>
     f0a:	5f 3f       	cpi	r21, 0xFF	; 255
     f0c:	71 f0       	breq	.+28     	; 0xf2a <__fp_splitA+0x1a>
     f0e:	47 95       	ror	r20

00000f10 <__fp_splitA>:
     f10:	88 0f       	add	r24, r24
     f12:	97 fb       	bst	r25, 7
     f14:	99 1f       	adc	r25, r25
     f16:	61 f0       	breq	.+24     	; 0xf30 <__fp_splitA+0x20>
     f18:	9f 3f       	cpi	r25, 0xFF	; 255
     f1a:	79 f0       	breq	.+30     	; 0xf3a <__fp_splitA+0x2a>
     f1c:	87 95       	ror	r24
     f1e:	08 95       	ret
     f20:	12 16       	cp	r1, r18
     f22:	13 06       	cpc	r1, r19
     f24:	14 06       	cpc	r1, r20
     f26:	55 1f       	adc	r21, r21
     f28:	f2 cf       	rjmp	.-28     	; 0xf0e <__fp_split3+0xe>
     f2a:	46 95       	lsr	r20
     f2c:	f1 df       	rcall	.-30     	; 0xf10 <__fp_splitA>
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <__fp_splitA+0x30>
     f30:	16 16       	cp	r1, r22
     f32:	17 06       	cpc	r1, r23
     f34:	18 06       	cpc	r1, r24
     f36:	99 1f       	adc	r25, r25
     f38:	f1 cf       	rjmp	.-30     	; 0xf1c <__fp_splitA+0xc>
     f3a:	86 95       	lsr	r24
     f3c:	71 05       	cpc	r23, r1
     f3e:	61 05       	cpc	r22, r1
     f40:	08 94       	sec
     f42:	08 95       	ret

00000f44 <__fp_zero>:
     f44:	e8 94       	clt

00000f46 <__fp_szero>:
     f46:	bb 27       	eor	r27, r27
     f48:	66 27       	eor	r22, r22
     f4a:	77 27       	eor	r23, r23
     f4c:	cb 01       	movw	r24, r22
     f4e:	97 f9       	bld	r25, 7
     f50:	08 95       	ret

00000f52 <__gesf2>:
     f52:	8a df       	rcall	.-236    	; 0xe68 <__fp_cmp>
     f54:	08 f4       	brcc	.+2      	; 0xf58 <__gesf2+0x6>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <sprintf>:
     f5a:	ae e0       	ldi	r26, 0x0E	; 14
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 eb       	ldi	r30, 0xB3	; 179
     f60:	f7 e0       	ldi	r31, 0x07	; 7
     f62:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__prologue_saves__+0x1c>
     f66:	0d 89       	ldd	r16, Y+21	; 0x15
     f68:	1e 89       	ldd	r17, Y+22	; 0x16
     f6a:	86 e0       	ldi	r24, 0x06	; 6
     f6c:	8c 83       	std	Y+4, r24	; 0x04
     f6e:	1a 83       	std	Y+2, r17	; 0x02
     f70:	09 83       	std	Y+1, r16	; 0x01
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	9f e7       	ldi	r25, 0x7F	; 127
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
     f7a:	ae 01       	movw	r20, r28
     f7c:	47 5e       	subi	r20, 0xE7	; 231
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	6f 89       	ldd	r22, Y+23	; 0x17
     f82:	78 8d       	ldd	r23, Y+24	; 0x18
     f84:	ce 01       	movw	r24, r28
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vfprintf>
     f8c:	ef 81       	ldd	r30, Y+7	; 0x07
     f8e:	f8 85       	ldd	r31, Y+8	; 0x08
     f90:	e0 0f       	add	r30, r16
     f92:	f1 1f       	adc	r31, r17
     f94:	10 82       	st	Z, r1
     f96:	2e 96       	adiw	r28, 0x0e	; 14
     f98:	e4 e0       	ldi	r30, 0x04	; 4
     f9a:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__epilogue_restores__+0x1c>

00000f9e <vfprintf>:
     f9e:	ac e0       	ldi	r26, 0x0C	; 12
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 ed       	ldi	r30, 0xD5	; 213
     fa4:	f7 e0       	ldi	r31, 0x07	; 7
     fa6:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__>
     faa:	7c 01       	movw	r14, r24
     fac:	6b 01       	movw	r12, r22
     fae:	8a 01       	movw	r16, r20
     fb0:	fc 01       	movw	r30, r24
     fb2:	17 82       	std	Z+7, r1	; 0x07
     fb4:	16 82       	std	Z+6, r1	; 0x06
     fb6:	83 81       	ldd	r24, Z+3	; 0x03
     fb8:	81 ff       	sbrs	r24, 1
     fba:	bd c1       	rjmp	.+890    	; 0x1336 <vfprintf+0x398>
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	4c 01       	movw	r8, r24
     fc2:	f7 01       	movw	r30, r14
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	f6 01       	movw	r30, r12
     fc8:	93 fd       	sbrc	r25, 3
     fca:	85 91       	lpm	r24, Z+
     fcc:	93 ff       	sbrs	r25, 3
     fce:	81 91       	ld	r24, Z+
     fd0:	6f 01       	movw	r12, r30
     fd2:	88 23       	and	r24, r24
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <vfprintf+0x3a>
     fd6:	ab c1       	rjmp	.+854    	; 0x132e <vfprintf+0x390>
     fd8:	85 32       	cpi	r24, 0x25	; 37
     fda:	39 f4       	brne	.+14     	; 0xfea <vfprintf+0x4c>
     fdc:	93 fd       	sbrc	r25, 3
     fde:	85 91       	lpm	r24, Z+
     fe0:	93 ff       	sbrs	r25, 3
     fe2:	81 91       	ld	r24, Z+
     fe4:	6f 01       	movw	r12, r30
     fe6:	85 32       	cpi	r24, 0x25	; 37
     fe8:	29 f4       	brne	.+10     	; 0xff4 <vfprintf+0x56>
     fea:	b7 01       	movw	r22, r14
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
     ff2:	e7 cf       	rjmp	.-50     	; 0xfc2 <vfprintf+0x24>
     ff4:	51 2c       	mov	r5, r1
     ff6:	31 2c       	mov	r3, r1
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	20 32       	cpi	r18, 0x20	; 32
     ffc:	a0 f4       	brcc	.+40     	; 0x1026 <vfprintf+0x88>
     ffe:	8b 32       	cpi	r24, 0x2B	; 43
    1000:	69 f0       	breq	.+26     	; 0x101c <vfprintf+0x7e>
    1002:	30 f4       	brcc	.+12     	; 0x1010 <vfprintf+0x72>
    1004:	80 32       	cpi	r24, 0x20	; 32
    1006:	59 f0       	breq	.+22     	; 0x101e <vfprintf+0x80>
    1008:	83 32       	cpi	r24, 0x23	; 35
    100a:	69 f4       	brne	.+26     	; 0x1026 <vfprintf+0x88>
    100c:	20 61       	ori	r18, 0x10	; 16
    100e:	2c c0       	rjmp	.+88     	; 0x1068 <vfprintf+0xca>
    1010:	8d 32       	cpi	r24, 0x2D	; 45
    1012:	39 f0       	breq	.+14     	; 0x1022 <vfprintf+0x84>
    1014:	80 33       	cpi	r24, 0x30	; 48
    1016:	39 f4       	brne	.+14     	; 0x1026 <vfprintf+0x88>
    1018:	21 60       	ori	r18, 0x01	; 1
    101a:	26 c0       	rjmp	.+76     	; 0x1068 <vfprintf+0xca>
    101c:	22 60       	ori	r18, 0x02	; 2
    101e:	24 60       	ori	r18, 0x04	; 4
    1020:	23 c0       	rjmp	.+70     	; 0x1068 <vfprintf+0xca>
    1022:	28 60       	ori	r18, 0x08	; 8
    1024:	21 c0       	rjmp	.+66     	; 0x1068 <vfprintf+0xca>
    1026:	27 fd       	sbrc	r18, 7
    1028:	27 c0       	rjmp	.+78     	; 0x1078 <vfprintf+0xda>
    102a:	30 ed       	ldi	r19, 0xD0	; 208
    102c:	38 0f       	add	r19, r24
    102e:	3a 30       	cpi	r19, 0x0A	; 10
    1030:	78 f4       	brcc	.+30     	; 0x1050 <vfprintf+0xb2>
    1032:	26 ff       	sbrs	r18, 6
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <vfprintf+0xa4>
    1036:	fa e0       	ldi	r31, 0x0A	; 10
    1038:	5f 9e       	mul	r5, r31
    103a:	30 0d       	add	r19, r0
    103c:	11 24       	eor	r1, r1
    103e:	53 2e       	mov	r5, r19
    1040:	13 c0       	rjmp	.+38     	; 0x1068 <vfprintf+0xca>
    1042:	8a e0       	ldi	r24, 0x0A	; 10
    1044:	38 9e       	mul	r3, r24
    1046:	30 0d       	add	r19, r0
    1048:	11 24       	eor	r1, r1
    104a:	33 2e       	mov	r3, r19
    104c:	20 62       	ori	r18, 0x20	; 32
    104e:	0c c0       	rjmp	.+24     	; 0x1068 <vfprintf+0xca>
    1050:	8e 32       	cpi	r24, 0x2E	; 46
    1052:	21 f4       	brne	.+8      	; 0x105c <vfprintf+0xbe>
    1054:	26 fd       	sbrc	r18, 6
    1056:	6b c1       	rjmp	.+726    	; 0x132e <vfprintf+0x390>
    1058:	20 64       	ori	r18, 0x40	; 64
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <vfprintf+0xca>
    105c:	8c 36       	cpi	r24, 0x6C	; 108
    105e:	11 f4       	brne	.+4      	; 0x1064 <vfprintf+0xc6>
    1060:	20 68       	ori	r18, 0x80	; 128
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <vfprintf+0xca>
    1064:	88 36       	cpi	r24, 0x68	; 104
    1066:	41 f4       	brne	.+16     	; 0x1078 <vfprintf+0xda>
    1068:	f6 01       	movw	r30, r12
    106a:	93 fd       	sbrc	r25, 3
    106c:	85 91       	lpm	r24, Z+
    106e:	93 ff       	sbrs	r25, 3
    1070:	81 91       	ld	r24, Z+
    1072:	6f 01       	movw	r12, r30
    1074:	81 11       	cpse	r24, r1
    1076:	c1 cf       	rjmp	.-126    	; 0xffa <vfprintf+0x5c>
    1078:	98 2f       	mov	r25, r24
    107a:	9f 7d       	andi	r25, 0xDF	; 223
    107c:	95 54       	subi	r25, 0x45	; 69
    107e:	93 30       	cpi	r25, 0x03	; 3
    1080:	28 f4       	brcc	.+10     	; 0x108c <vfprintf+0xee>
    1082:	0c 5f       	subi	r16, 0xFC	; 252
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	ff e3       	ldi	r31, 0x3F	; 63
    1088:	f9 83       	std	Y+1, r31	; 0x01
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <vfprintf+0x108>
    108c:	83 36       	cpi	r24, 0x63	; 99
    108e:	31 f0       	breq	.+12     	; 0x109c <vfprintf+0xfe>
    1090:	83 37       	cpi	r24, 0x73	; 115
    1092:	71 f0       	breq	.+28     	; 0x10b0 <vfprintf+0x112>
    1094:	83 35       	cpi	r24, 0x53	; 83
    1096:	09 f0       	breq	.+2      	; 0x109a <vfprintf+0xfc>
    1098:	5b c0       	rjmp	.+182    	; 0x1150 <vfprintf+0x1b2>
    109a:	22 c0       	rjmp	.+68     	; 0x10e0 <vfprintf+0x142>
    109c:	f8 01       	movw	r30, r16
    109e:	80 81       	ld	r24, Z
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	0e 5f       	subi	r16, 0xFE	; 254
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	44 24       	eor	r4, r4
    10a8:	43 94       	inc	r4
    10aa:	51 2c       	mov	r5, r1
    10ac:	54 01       	movw	r10, r8
    10ae:	15 c0       	rjmp	.+42     	; 0x10da <vfprintf+0x13c>
    10b0:	38 01       	movw	r6, r16
    10b2:	f2 e0       	ldi	r31, 0x02	; 2
    10b4:	6f 0e       	add	r6, r31
    10b6:	71 1c       	adc	r7, r1
    10b8:	f8 01       	movw	r30, r16
    10ba:	a0 80       	ld	r10, Z
    10bc:	b1 80       	ldd	r11, Z+1	; 0x01
    10be:	26 ff       	sbrs	r18, 6
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <vfprintf+0x12a>
    10c2:	65 2d       	mov	r22, r5
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x12e>
    10c8:	6f ef       	ldi	r22, 0xFF	; 255
    10ca:	7f ef       	ldi	r23, 0xFF	; 255
    10cc:	c5 01       	movw	r24, r10
    10ce:	2c 87       	std	Y+12, r18	; 0x0c
    10d0:	0e 94 ac 09 	call	0x1358	; 0x1358 <strnlen>
    10d4:	2c 01       	movw	r4, r24
    10d6:	83 01       	movw	r16, r6
    10d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10da:	2f 77       	andi	r18, 0x7F	; 127
    10dc:	22 2e       	mov	r2, r18
    10de:	17 c0       	rjmp	.+46     	; 0x110e <vfprintf+0x170>
    10e0:	38 01       	movw	r6, r16
    10e2:	f2 e0       	ldi	r31, 0x02	; 2
    10e4:	6f 0e       	add	r6, r31
    10e6:	71 1c       	adc	r7, r1
    10e8:	f8 01       	movw	r30, r16
    10ea:	a0 80       	ld	r10, Z
    10ec:	b1 80       	ldd	r11, Z+1	; 0x01
    10ee:	26 ff       	sbrs	r18, 6
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <vfprintf+0x15a>
    10f2:	65 2d       	mov	r22, r5
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <vfprintf+0x15e>
    10f8:	6f ef       	ldi	r22, 0xFF	; 255
    10fa:	7f ef       	ldi	r23, 0xFF	; 255
    10fc:	c5 01       	movw	r24, r10
    10fe:	2c 87       	std	Y+12, r18	; 0x0c
    1100:	0e 94 a1 09 	call	0x1342	; 0x1342 <strnlen_P>
    1104:	2c 01       	movw	r4, r24
    1106:	2c 85       	ldd	r18, Y+12	; 0x0c
    1108:	20 68       	ori	r18, 0x80	; 128
    110a:	22 2e       	mov	r2, r18
    110c:	83 01       	movw	r16, r6
    110e:	23 fc       	sbrc	r2, 3
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <vfprintf+0x1aa>
    1112:	83 2d       	mov	r24, r3
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	48 16       	cp	r4, r24
    1118:	59 06       	cpc	r5, r25
    111a:	b0 f4       	brcc	.+44     	; 0x1148 <vfprintf+0x1aa>
    111c:	b7 01       	movw	r22, r14
    111e:	80 e2       	ldi	r24, 0x20	; 32
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    1126:	3a 94       	dec	r3
    1128:	f4 cf       	rjmp	.-24     	; 0x1112 <vfprintf+0x174>
    112a:	f5 01       	movw	r30, r10
    112c:	27 fc       	sbrc	r2, 7
    112e:	85 91       	lpm	r24, Z+
    1130:	27 fe       	sbrs	r2, 7
    1132:	81 91       	ld	r24, Z+
    1134:	5f 01       	movw	r10, r30
    1136:	b7 01       	movw	r22, r14
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    113e:	31 10       	cpse	r3, r1
    1140:	3a 94       	dec	r3
    1142:	f1 e0       	ldi	r31, 0x01	; 1
    1144:	4f 1a       	sub	r4, r31
    1146:	51 08       	sbc	r5, r1
    1148:	41 14       	cp	r4, r1
    114a:	51 04       	cpc	r5, r1
    114c:	71 f7       	brne	.-36     	; 0x112a <vfprintf+0x18c>
    114e:	e5 c0       	rjmp	.+458    	; 0x131a <vfprintf+0x37c>
    1150:	84 36       	cpi	r24, 0x64	; 100
    1152:	11 f0       	breq	.+4      	; 0x1158 <vfprintf+0x1ba>
    1154:	89 36       	cpi	r24, 0x69	; 105
    1156:	39 f5       	brne	.+78     	; 0x11a6 <vfprintf+0x208>
    1158:	f8 01       	movw	r30, r16
    115a:	27 ff       	sbrs	r18, 7
    115c:	07 c0       	rjmp	.+14     	; 0x116c <vfprintf+0x1ce>
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	0c 5f       	subi	r16, 0xFC	; 252
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
    116a:	08 c0       	rjmp	.+16     	; 0x117c <vfprintf+0x1de>
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	88 27       	eor	r24, r24
    1172:	77 fd       	sbrc	r23, 7
    1174:	80 95       	com	r24
    1176:	98 2f       	mov	r25, r24
    1178:	0e 5f       	subi	r16, 0xFE	; 254
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	2f 76       	andi	r18, 0x6F	; 111
    117e:	b2 2e       	mov	r11, r18
    1180:	97 ff       	sbrs	r25, 7
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <vfprintf+0x1f8>
    1184:	90 95       	com	r25
    1186:	80 95       	com	r24
    1188:	70 95       	com	r23
    118a:	61 95       	neg	r22
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	8f 4f       	sbci	r24, 0xFF	; 255
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	20 68       	ori	r18, 0x80	; 128
    1194:	b2 2e       	mov	r11, r18
    1196:	2a e0       	ldi	r18, 0x0A	; 10
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	a4 01       	movw	r20, r8
    119c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__ultoa_invert>
    11a0:	a8 2e       	mov	r10, r24
    11a2:	a8 18       	sub	r10, r8
    11a4:	44 c0       	rjmp	.+136    	; 0x122e <vfprintf+0x290>
    11a6:	85 37       	cpi	r24, 0x75	; 117
    11a8:	29 f4       	brne	.+10     	; 0x11b4 <vfprintf+0x216>
    11aa:	2f 7e       	andi	r18, 0xEF	; 239
    11ac:	b2 2e       	mov	r11, r18
    11ae:	2a e0       	ldi	r18, 0x0A	; 10
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	25 c0       	rjmp	.+74     	; 0x11fe <vfprintf+0x260>
    11b4:	f2 2f       	mov	r31, r18
    11b6:	f9 7f       	andi	r31, 0xF9	; 249
    11b8:	bf 2e       	mov	r11, r31
    11ba:	8f 36       	cpi	r24, 0x6F	; 111
    11bc:	c1 f0       	breq	.+48     	; 0x11ee <vfprintf+0x250>
    11be:	18 f4       	brcc	.+6      	; 0x11c6 <vfprintf+0x228>
    11c0:	88 35       	cpi	r24, 0x58	; 88
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <vfprintf+0x244>
    11c4:	b4 c0       	rjmp	.+360    	; 0x132e <vfprintf+0x390>
    11c6:	80 37       	cpi	r24, 0x70	; 112
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <vfprintf+0x232>
    11ca:	88 37       	cpi	r24, 0x78	; 120
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <vfprintf+0x238>
    11ce:	af c0       	rjmp	.+350    	; 0x132e <vfprintf+0x390>
    11d0:	2f 2f       	mov	r18, r31
    11d2:	20 61       	ori	r18, 0x10	; 16
    11d4:	b2 2e       	mov	r11, r18
    11d6:	b4 fe       	sbrs	r11, 4
    11d8:	0d c0       	rjmp	.+26     	; 0x11f4 <vfprintf+0x256>
    11da:	8b 2d       	mov	r24, r11
    11dc:	84 60       	ori	r24, 0x04	; 4
    11de:	b8 2e       	mov	r11, r24
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <vfprintf+0x256>
    11e2:	24 ff       	sbrs	r18, 4
    11e4:	0a c0       	rjmp	.+20     	; 0x11fa <vfprintf+0x25c>
    11e6:	9f 2f       	mov	r25, r31
    11e8:	96 60       	ori	r25, 0x06	; 6
    11ea:	b9 2e       	mov	r11, r25
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0x25c>
    11ee:	28 e0       	ldi	r18, 0x08	; 8
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <vfprintf+0x260>
    11f4:	20 e1       	ldi	r18, 0x10	; 16
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <vfprintf+0x260>
    11fa:	20 e1       	ldi	r18, 0x10	; 16
    11fc:	32 e0       	ldi	r19, 0x02	; 2
    11fe:	f8 01       	movw	r30, r16
    1200:	b7 fe       	sbrs	r11, 7
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <vfprintf+0x274>
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	0c 5f       	subi	r16, 0xFC	; 252
    120e:	1f 4f       	sbci	r17, 0xFF	; 255
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0x280>
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 5f       	subi	r16, 0xFE	; 254
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	a4 01       	movw	r20, r8
    1220:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__ultoa_invert>
    1224:	a8 2e       	mov	r10, r24
    1226:	a8 18       	sub	r10, r8
    1228:	fb 2d       	mov	r31, r11
    122a:	ff 77       	andi	r31, 0x7F	; 127
    122c:	bf 2e       	mov	r11, r31
    122e:	b6 fe       	sbrs	r11, 6
    1230:	0b c0       	rjmp	.+22     	; 0x1248 <vfprintf+0x2aa>
    1232:	2b 2d       	mov	r18, r11
    1234:	2e 7f       	andi	r18, 0xFE	; 254
    1236:	a5 14       	cp	r10, r5
    1238:	50 f4       	brcc	.+20     	; 0x124e <vfprintf+0x2b0>
    123a:	b4 fe       	sbrs	r11, 4
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <vfprintf+0x2b4>
    123e:	b2 fc       	sbrc	r11, 2
    1240:	08 c0       	rjmp	.+16     	; 0x1252 <vfprintf+0x2b4>
    1242:	2b 2d       	mov	r18, r11
    1244:	2e 7e       	andi	r18, 0xEE	; 238
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <vfprintf+0x2b4>
    1248:	7a 2c       	mov	r7, r10
    124a:	2b 2d       	mov	r18, r11
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <vfprintf+0x2b6>
    124e:	7a 2c       	mov	r7, r10
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <vfprintf+0x2b6>
    1252:	75 2c       	mov	r7, r5
    1254:	24 ff       	sbrs	r18, 4
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <vfprintf+0x2d4>
    1258:	fe 01       	movw	r30, r28
    125a:	ea 0d       	add	r30, r10
    125c:	f1 1d       	adc	r31, r1
    125e:	80 81       	ld	r24, Z
    1260:	80 33       	cpi	r24, 0x30	; 48
    1262:	11 f4       	brne	.+4      	; 0x1268 <vfprintf+0x2ca>
    1264:	29 7e       	andi	r18, 0xE9	; 233
    1266:	09 c0       	rjmp	.+18     	; 0x127a <vfprintf+0x2dc>
    1268:	22 ff       	sbrs	r18, 2
    126a:	06 c0       	rjmp	.+12     	; 0x1278 <vfprintf+0x2da>
    126c:	73 94       	inc	r7
    126e:	73 94       	inc	r7
    1270:	04 c0       	rjmp	.+8      	; 0x127a <vfprintf+0x2dc>
    1272:	82 2f       	mov	r24, r18
    1274:	86 78       	andi	r24, 0x86	; 134
    1276:	09 f0       	breq	.+2      	; 0x127a <vfprintf+0x2dc>
    1278:	73 94       	inc	r7
    127a:	23 fd       	sbrc	r18, 3
    127c:	13 c0       	rjmp	.+38     	; 0x12a4 <vfprintf+0x306>
    127e:	20 ff       	sbrs	r18, 0
    1280:	06 c0       	rjmp	.+12     	; 0x128e <vfprintf+0x2f0>
    1282:	5a 2c       	mov	r5, r10
    1284:	73 14       	cp	r7, r3
    1286:	18 f4       	brcc	.+6      	; 0x128e <vfprintf+0x2f0>
    1288:	53 0c       	add	r5, r3
    128a:	57 18       	sub	r5, r7
    128c:	73 2c       	mov	r7, r3
    128e:	73 14       	cp	r7, r3
    1290:	68 f4       	brcc	.+26     	; 0x12ac <vfprintf+0x30e>
    1292:	b7 01       	movw	r22, r14
    1294:	80 e2       	ldi	r24, 0x20	; 32
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2c 87       	std	Y+12, r18	; 0x0c
    129a:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    129e:	73 94       	inc	r7
    12a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    12a2:	f5 cf       	rjmp	.-22     	; 0x128e <vfprintf+0x2f0>
    12a4:	73 14       	cp	r7, r3
    12a6:	10 f4       	brcc	.+4      	; 0x12ac <vfprintf+0x30e>
    12a8:	37 18       	sub	r3, r7
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <vfprintf+0x310>
    12ac:	31 2c       	mov	r3, r1
    12ae:	24 ff       	sbrs	r18, 4
    12b0:	12 c0       	rjmp	.+36     	; 0x12d6 <vfprintf+0x338>
    12b2:	b7 01       	movw	r22, r14
    12b4:	80 e3       	ldi	r24, 0x30	; 48
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2c 87       	std	Y+12, r18	; 0x0c
    12ba:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    12be:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c0:	22 ff       	sbrs	r18, 2
    12c2:	17 c0       	rjmp	.+46     	; 0x12f2 <vfprintf+0x354>
    12c4:	21 ff       	sbrs	r18, 1
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <vfprintf+0x330>
    12c8:	88 e5       	ldi	r24, 0x58	; 88
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x334>
    12ce:	88 e7       	ldi	r24, 0x78	; 120
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	b7 01       	movw	r22, r14
    12d4:	0c c0       	rjmp	.+24     	; 0x12ee <vfprintf+0x350>
    12d6:	82 2f       	mov	r24, r18
    12d8:	86 78       	andi	r24, 0x86	; 134
    12da:	59 f0       	breq	.+22     	; 0x12f2 <vfprintf+0x354>
    12dc:	21 fd       	sbrc	r18, 1
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <vfprintf+0x346>
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <vfprintf+0x348>
    12e4:	8b e2       	ldi	r24, 0x2B	; 43
    12e6:	27 fd       	sbrc	r18, 7
    12e8:	8d e2       	ldi	r24, 0x2D	; 45
    12ea:	b7 01       	movw	r22, r14
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    12f2:	a5 14       	cp	r10, r5
    12f4:	38 f4       	brcc	.+14     	; 0x1304 <vfprintf+0x366>
    12f6:	b7 01       	movw	r22, r14
    12f8:	80 e3       	ldi	r24, 0x30	; 48
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    1300:	5a 94       	dec	r5
    1302:	f7 cf       	rjmp	.-18     	; 0x12f2 <vfprintf+0x354>
    1304:	aa 94       	dec	r10
    1306:	f4 01       	movw	r30, r8
    1308:	ea 0d       	add	r30, r10
    130a:	f1 1d       	adc	r31, r1
    130c:	80 81       	ld	r24, Z
    130e:	b7 01       	movw	r22, r14
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    1316:	a1 10       	cpse	r10, r1
    1318:	f5 cf       	rjmp	.-22     	; 0x1304 <vfprintf+0x366>
    131a:	33 20       	and	r3, r3
    131c:	09 f4       	brne	.+2      	; 0x1320 <vfprintf+0x382>
    131e:	51 ce       	rjmp	.-862    	; 0xfc2 <vfprintf+0x24>
    1320:	b7 01       	movw	r22, r14
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 b7 09 	call	0x136e	; 0x136e <fputc>
    132a:	3a 94       	dec	r3
    132c:	f6 cf       	rjmp	.-20     	; 0x131a <vfprintf+0x37c>
    132e:	f7 01       	movw	r30, r14
    1330:	86 81       	ldd	r24, Z+6	; 0x06
    1332:	97 81       	ldd	r25, Z+7	; 0x07
    1334:	02 c0       	rjmp	.+4      	; 0x133a <vfprintf+0x39c>
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	9f ef       	ldi	r25, 0xFF	; 255
    133a:	2c 96       	adiw	r28, 0x0c	; 12
    133c:	e2 e1       	ldi	r30, 0x12	; 18
    133e:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__>

00001342 <strnlen_P>:
    1342:	fc 01       	movw	r30, r24
    1344:	05 90       	lpm	r0, Z+
    1346:	61 50       	subi	r22, 0x01	; 1
    1348:	70 40       	sbci	r23, 0x00	; 0
    134a:	01 10       	cpse	r0, r1
    134c:	d8 f7       	brcc	.-10     	; 0x1344 <strnlen_P+0x2>
    134e:	80 95       	com	r24
    1350:	90 95       	com	r25
    1352:	8e 0f       	add	r24, r30
    1354:	9f 1f       	adc	r25, r31
    1356:	08 95       	ret

00001358 <strnlen>:
    1358:	fc 01       	movw	r30, r24
    135a:	61 50       	subi	r22, 0x01	; 1
    135c:	70 40       	sbci	r23, 0x00	; 0
    135e:	01 90       	ld	r0, Z+
    1360:	01 10       	cpse	r0, r1
    1362:	d8 f7       	brcc	.-10     	; 0x135a <strnlen+0x2>
    1364:	80 95       	com	r24
    1366:	90 95       	com	r25
    1368:	8e 0f       	add	r24, r30
    136a:	9f 1f       	adc	r25, r31
    136c:	08 95       	ret

0000136e <fputc>:
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	18 2f       	mov	r17, r24
    1378:	09 2f       	mov	r16, r25
    137a:	eb 01       	movw	r28, r22
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	81 fd       	sbrc	r24, 1
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <fputc+0x1a>
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	20 c0       	rjmp	.+64     	; 0x13c8 <fputc+0x5a>
    1388:	82 ff       	sbrs	r24, 2
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <fputc+0x3e>
    138c:	4e 81       	ldd	r20, Y+6	; 0x06
    138e:	5f 81       	ldd	r21, Y+7	; 0x07
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	42 17       	cp	r20, r18
    1396:	53 07       	cpc	r21, r19
    1398:	7c f4       	brge	.+30     	; 0x13b8 <fputc+0x4a>
    139a:	e8 81       	ld	r30, Y
    139c:	f9 81       	ldd	r31, Y+1	; 0x01
    139e:	9f 01       	movw	r18, r30
    13a0:	2f 5f       	subi	r18, 0xFF	; 255
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	39 83       	std	Y+1, r19	; 0x01
    13a6:	28 83       	st	Y, r18
    13a8:	10 83       	st	Z, r17
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <fputc+0x4a>
    13ac:	e8 85       	ldd	r30, Y+8	; 0x08
    13ae:	f9 85       	ldd	r31, Y+9	; 0x09
    13b0:	81 2f       	mov	r24, r17
    13b2:	09 95       	icall
    13b4:	89 2b       	or	r24, r25
    13b6:	29 f7       	brne	.-54     	; 0x1382 <fputc+0x14>
    13b8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ba:	3f 81       	ldd	r19, Y+7	; 0x07
    13bc:	2f 5f       	subi	r18, 0xFF	; 255
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	3f 83       	std	Y+7, r19	; 0x07
    13c2:	2e 83       	std	Y+6, r18	; 0x06
    13c4:	81 2f       	mov	r24, r17
    13c6:	90 2f       	mov	r25, r16
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret

000013d2 <__ultoa_invert>:
    13d2:	fa 01       	movw	r30, r20
    13d4:	aa 27       	eor	r26, r26
    13d6:	28 30       	cpi	r18, 0x08	; 8
    13d8:	51 f1       	breq	.+84     	; 0x142e <__ultoa_invert+0x5c>
    13da:	20 31       	cpi	r18, 0x10	; 16
    13dc:	81 f1       	breq	.+96     	; 0x143e <__ultoa_invert+0x6c>
    13de:	e8 94       	clt
    13e0:	6f 93       	push	r22
    13e2:	6e 7f       	andi	r22, 0xFE	; 254
    13e4:	6e 5f       	subi	r22, 0xFE	; 254
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	af 4f       	sbci	r26, 0xFF	; 255
    13ee:	b1 e0       	ldi	r27, 0x01	; 1
    13f0:	3e d0       	rcall	.+124    	; 0x146e <__ultoa_invert+0x9c>
    13f2:	b4 e0       	ldi	r27, 0x04	; 4
    13f4:	3c d0       	rcall	.+120    	; 0x146e <__ultoa_invert+0x9c>
    13f6:	67 0f       	add	r22, r23
    13f8:	78 1f       	adc	r23, r24
    13fa:	89 1f       	adc	r24, r25
    13fc:	9a 1f       	adc	r25, r26
    13fe:	a1 1d       	adc	r26, r1
    1400:	68 0f       	add	r22, r24
    1402:	79 1f       	adc	r23, r25
    1404:	8a 1f       	adc	r24, r26
    1406:	91 1d       	adc	r25, r1
    1408:	a1 1d       	adc	r26, r1
    140a:	6a 0f       	add	r22, r26
    140c:	71 1d       	adc	r23, r1
    140e:	81 1d       	adc	r24, r1
    1410:	91 1d       	adc	r25, r1
    1412:	a1 1d       	adc	r26, r1
    1414:	20 d0       	rcall	.+64     	; 0x1456 <__ultoa_invert+0x84>
    1416:	09 f4       	brne	.+2      	; 0x141a <__ultoa_invert+0x48>
    1418:	68 94       	set
    141a:	3f 91       	pop	r19
    141c:	2a e0       	ldi	r18, 0x0A	; 10
    141e:	26 9f       	mul	r18, r22
    1420:	11 24       	eor	r1, r1
    1422:	30 19       	sub	r19, r0
    1424:	30 5d       	subi	r19, 0xD0	; 208
    1426:	31 93       	st	Z+, r19
    1428:	de f6       	brtc	.-74     	; 0x13e0 <__ultoa_invert+0xe>
    142a:	cf 01       	movw	r24, r30
    142c:	08 95       	ret
    142e:	46 2f       	mov	r20, r22
    1430:	47 70       	andi	r20, 0x07	; 7
    1432:	40 5d       	subi	r20, 0xD0	; 208
    1434:	41 93       	st	Z+, r20
    1436:	b3 e0       	ldi	r27, 0x03	; 3
    1438:	0f d0       	rcall	.+30     	; 0x1458 <__ultoa_invert+0x86>
    143a:	c9 f7       	brne	.-14     	; 0x142e <__ultoa_invert+0x5c>
    143c:	f6 cf       	rjmp	.-20     	; 0x142a <__ultoa_invert+0x58>
    143e:	46 2f       	mov	r20, r22
    1440:	4f 70       	andi	r20, 0x0F	; 15
    1442:	40 5d       	subi	r20, 0xD0	; 208
    1444:	4a 33       	cpi	r20, 0x3A	; 58
    1446:	18 f0       	brcs	.+6      	; 0x144e <__ultoa_invert+0x7c>
    1448:	49 5d       	subi	r20, 0xD9	; 217
    144a:	31 fd       	sbrc	r19, 1
    144c:	40 52       	subi	r20, 0x20	; 32
    144e:	41 93       	st	Z+, r20
    1450:	02 d0       	rcall	.+4      	; 0x1456 <__ultoa_invert+0x84>
    1452:	a9 f7       	brne	.-22     	; 0x143e <__ultoa_invert+0x6c>
    1454:	ea cf       	rjmp	.-44     	; 0x142a <__ultoa_invert+0x58>
    1456:	b4 e0       	ldi	r27, 0x04	; 4
    1458:	a6 95       	lsr	r26
    145a:	97 95       	ror	r25
    145c:	87 95       	ror	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	ba 95       	dec	r27
    1464:	c9 f7       	brne	.-14     	; 0x1458 <__ultoa_invert+0x86>
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	61 05       	cpc	r22, r1
    146a:	71 05       	cpc	r23, r1
    146c:	08 95       	ret
    146e:	9b 01       	movw	r18, r22
    1470:	ac 01       	movw	r20, r24
    1472:	0a 2e       	mov	r0, r26
    1474:	06 94       	lsr	r0
    1476:	57 95       	ror	r21
    1478:	47 95       	ror	r20
    147a:	37 95       	ror	r19
    147c:	27 95       	ror	r18
    147e:	ba 95       	dec	r27
    1480:	c9 f7       	brne	.-14     	; 0x1474 <__ultoa_invert+0xa2>
    1482:	62 0f       	add	r22, r18
    1484:	73 1f       	adc	r23, r19
    1486:	84 1f       	adc	r24, r20
    1488:	95 1f       	adc	r25, r21
    148a:	a0 1d       	adc	r26, r0
    148c:	08 95       	ret

0000148e <__prologue_saves__>:
    148e:	2f 92       	push	r2
    1490:	3f 92       	push	r3
    1492:	4f 92       	push	r4
    1494:	5f 92       	push	r5
    1496:	6f 92       	push	r6
    1498:	7f 92       	push	r7
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	af 92       	push	r10
    14a0:	bf 92       	push	r11
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	ca 1b       	sub	r28, r26
    14b8:	db 0b       	sbc	r29, r27
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	09 94       	ijmp

000014c6 <__epilogue_restores__>:
    14c6:	2a 88       	ldd	r2, Y+18	; 0x12
    14c8:	39 88       	ldd	r3, Y+17	; 0x11
    14ca:	48 88       	ldd	r4, Y+16	; 0x10
    14cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    14d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    14d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    14d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    14d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    14d8:	b9 84       	ldd	r11, Y+9	; 0x09
    14da:	c8 84       	ldd	r12, Y+8	; 0x08
    14dc:	df 80       	ldd	r13, Y+7	; 0x07
    14de:	ee 80       	ldd	r14, Y+6	; 0x06
    14e0:	fd 80       	ldd	r15, Y+5	; 0x05
    14e2:	0c 81       	ldd	r16, Y+4	; 0x04
    14e4:	1b 81       	ldd	r17, Y+3	; 0x03
    14e6:	aa 81       	ldd	r26, Y+2	; 0x02
    14e8:	b9 81       	ldd	r27, Y+1	; 0x01
    14ea:	ce 0f       	add	r28, r30
    14ec:	d1 1d       	adc	r29, r1
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	ed 01       	movw	r28, r26
    14fa:	08 95       	ret

000014fc <_exit>:
    14fc:	f8 94       	cli

000014fe <__stop_program>:
    14fe:	ff cf       	rjmp	.-2      	; 0x14fe <__stop_program>
